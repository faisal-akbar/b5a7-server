{
	"info": {
		"_postman_id": "15627307-3222-4b4c-92e4-c6bb485445ce",
		"name": "b5a7-portfolio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12876263"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create Admin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Faisal Akbar\",\r\n    \"email\" : \"faisalmis14@gmail.com\",\r\n    \"password\" :\"Ph@12345678\",\r\n    \"role\" : \"ADMIN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/v1/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"user",
								"register"
							]
						},
						"description": "## Create Admin User\n\nThis endpoint allows you to create a new admin or super admin user in the system. Only Super admin can create super admin.\n\nExample of a request body:\n\n``` json\n{\n  \"name\": \"Faisal Akbar\",\n  \"email\": \"testAdmin2@gmail.com\",\n  \"password\": \"Ph@12345678\",\n  \"role\": \"ADMIN\"\n}\n\n ```\n\n### Response\n\nExample of a successful response:\n\n``` json\n{\n    \"statusCode\": 201,\n    \"success\": true,\n    \"message\": \"Admin Created Successfully\",\n    \"data\": {\n        \"name\": \"Faisal Akbar\",\n        \"email\": \"testAdmin2@gmail.com\",\n        \"password\": \"$2b$10$VZSDPcgRUUjqOUtw4OtoVu3dZoL5VaaBzvMTEJVFY62H3DBTq8/.2\",\n        \"role\": \"ADMIN\",\n        \"isActive\": \"ACTIVE\",\n        \"isVerified\": false,\n        \"isDeleted\": false,\n        \"_id\": \"688c45e50ce0848d7e4d5f3b\",\n        \"createdAt\": \"2025-08-01T04:43:17.899Z\",\n        \"updatedAt\": \"2025-08-01T04:43:17.899Z\"\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODg5NGJjOWJhMzA2OTdlNzY1OTY3MmYiLCJlbWFpbCI6ImZhaXNhbG1pczEzQGdtYWlsLmNvbSIsInJvbGUiOiJTRU5ERVIiLCJpYXQiOjE3NTM4Mjg1NDMsImV4cCI6MTc1MzkxNDk0M30.YC-yDxi_Jr-3K4OgX6q9RHBSxSvHXYDGrO-WK04t414",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\" : \"01912345676\",\r\n    \"defaultAddress\": \"dhaka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/v1/user/68894bc9ba30697e7659672f",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"user",
								"68894bc9ba30697e7659672f"
							]
						},
						"description": "### PATCH /api/v1/user/{userId}\n\nThis endpoint allows you to update the user information for a specific user identified by `Id`.\n\n**Example Request Body:**\n\n``` json\n{\n  \"phone\": \"01912345676\",\n  \"defaultAddress\": \"dhaka\"\n}\n\n ```\n\n**Example Response:**\n\n``` json\n{\n    \"statusCode\": 201,\n    \"success\": true,\n    \"message\": \"User Updated Successfully\",\n    \"data\": {\n        \"_id\": \"688c45e50ce0848d7e4d5f3b\",\n        \"name\": \"Faisal Akbar\",\n        \"email\": \"testAdmin2@gmail.com\",\n        \"password\": \"$2b$10$VZSDPcgRUUjqOUtw4OtoVu3dZoL5VaaBzvMTEJVFY62H3DBTq8/.2\",\n        \"role\": \"ADMIN\",\n        \"isActive\": \"ACTIVE\",\n        \"isVerified\": false,\n        \"isDeleted\": false,\n        \"createdAt\": \"2025-08-01T04:43:17.899Z\",\n        \"updatedAt\": \"2025-08-01T04:48:28.982Z\",\n        \"defaultAddress\": \"dhaka\",\n        \"phone\": \"01912345676\"\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get Me",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTkyMDMwNjEsImV4cCI6MTc1OTQ2MjI2MX0.nRpaKZgsiGwi7novV1vE_ZRZd-ym1u2orFUU7PPaiB8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/v1/user/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"user",
								"me"
							]
						},
						"description": "## Retrieve User Profile\n\nThis endpoint retrieves the profile information of the currently authenticated user.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `http://localhost:5000/api/v1/user/me`\n    \n\n#### Response Body\n\nThe response will contain a JSON object with the following structure:\n\n``` json\n{\n    \"statusCode\": 201,\n    \"success\": true,\n    \"message\": \"Your profile Retrieved Successfully\",\n    \"data\": {\n        \"_id\": \"688b96c2ba1b227ddf0ed1a3\",\n        \"name\": \"Admin User\",\n        \"email\": \"admin@example.com\",\n        \"phone\": \"01799999999\",\n        \"defaultAddress\": \"999 Admin Office, Dhaka\",\n        \"role\": \"ADMIN\",\n        \"isActive\": \"ACTIVE\",\n        \"isVerified\": true,\n        \"isDeleted\": false,\n        \"createdAt\": \"2025-07-31T16:16:02.221Z\",\n        \"updatedAt\": \"2025-07-31T16:16:02.221Z\"\n    }\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "User Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"super@next.com\",\r\n    \"password\": \"ph@123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "## Login API Endpoint\n\nThis endpoint is used to authenticate users by logging them into the application. It accepts user credentials and, upon successful authentication, returns an access token and refresh token along with user details.\n\n### Request\n\n- **Method**: POST\n    \n- **URL**: `http://localhost:5000/api/v1/auth/login`\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your_password\"\n}\n\n ```\n\n**Example Response:**\n\n``` json\n{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"User Logged In Successfully\",\n    \"data\": {\n        \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiZjIwNDhjMDg1MGFjM2RhYWVmZWEiLCJlbWFpbCI6ImZhaXNhbG1pczEzQGdtYWlsLmNvbSIsInJvbGUiOiJTRU5ERVIiLCJpYXQiOjE3NTQwMjE4NDcsImV4cCI6MTc1NDI4MTA0N30.uEoZT427mIyoYlkXL9oQzXWjyuAH8DET-YxWDq0sD7M\",\n        \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiZjIwNDhjMDg1MGFjM2RhYWVmZWEiLCJlbWFpbCI6ImZhaXNhbG1pczEzQGdtYWlsLmNvbSIsInJvbGUiOiJTRU5ERVIiLCJpYXQiOjE3NTQwMjE4NDcsImV4cCI6MTc1NDg4NTg0N30.tfVyY008mjP9hBP_bvSVz3mwOWudR3t5drPSsRRShR0\",\n        \"user\": {\n            \"_id\": \"688bf2048c0850ac3daaefea\",\n            \"name\": \"Faisal Akbar\",\n            \"email\": \"faisalmis13@gmail.com\",\n            \"phone\": \"01717001122\",\n            \"defaultAddress\": \"123 some st\",\n            \"role\": \"SENDER\",\n            \"isActive\": \"ACTIVE\",\n            \"isVerified\": true,\n            \"isDeleted\": false,\n            \"createdAt\": \"2025-07-31T22:45:24.292Z\",\n            \"updatedAt\": \"2025-07-31T22:46:41.974Z\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "New Access Token / Refresh Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/v1/auth/refresh-token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"auth",
								"refresh-token"
							]
						},
						"description": "## Refresh Token API\n\nThis endpoint is used to refresh the authentication token for a user session. It allows clients to obtain a new access token without requiring the user to log in again.\n\n### Request\n\n- **Method**: POST\n    \n- **Endpoint**: `/api/v1/auth/refresh-token`\n    \n\n#### Request Body\n\nThe request body must be sent in JSON format and should include the following parameters:\n\n- `refreshToken` (string): The refresh token issued during the initial authentication process. This token is required to validate the user's session and issue a new access token.\n    \n\n### Example Response\n\n``` json\n{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"New Access Token Retrieved Successfully\",\n    \"data\": {\n        \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiZjIwNDhjMDg1MGFjM2RhYWVmZWEiLCJlbWFpbCI6ImZhaXNhbG1pczEzQGdtYWlsLmNvbSIsInJvbGUiOiJTRU5ERVIiLCJpYXQiOjE3NTQwMjU0MjksImV4cCI6MTc1NDI4NDYyOX0.7UH3uSqpayqN0O2cCAX6x1bXKngaVgA5Rsr1-LVHC8U\"\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiOTZjMWJhMWIyMjdkZGYwZWQxODciLCJlbWFpbCI6ImpvaG4uc2VuZGVyQGV4YW1wbGUuY29tIiwicm9sZSI6IlNFTkRFUiIsImlhdCI6MTc1NDAxOTg4NiwiZXhwIjoxNzU0Mjc5MDg2fQ.xZPDY67jwrjrJZdJQ1OZUkv9Nq9qBqiF6P3iOmN-zYE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/v1/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "## Logout Endpoint\n\nThis endpoint is used to log out a user from the application.\n\n### Request\n\n- **Method**: `POST`\n    \n- **Endpoint**: `http://localhost:5000/api/v1/auth/logout`\n    \n\n#### Example Response\n\n``` json\n{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"User Logged Out Successfully\",\n    \"data\": null\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Project",
			"item": [
				{
					"name": "public",
					"item": [
						{
							"name": "Get Published projects- Public",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project/published",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project",
										"published"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "hello",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "id",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "isFeatured",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Get Published Projects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project/published",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project",
												"published"
											],
											"query": [
												{
													"key": "searchTerm",
													"value": "hello",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "isFeatured",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "11597"
										},
										{
											"key": "ETag",
											"value": "W/\"2d4d-BePzKdo5T1yK0q7Z5l62zWAn92U\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:25:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Published projects retrieved successfully\",\n    \"meta\": {\n        \"total\": 9,\n        \"page\": 1,\n        \"limit\": 50\n    },\n    \"data\": [\n        {\n            \"id\": 17,\n            \"title\": \"parcel Delivery System\",\n            \"slug\": \"parcel-delivery-system\",\n            \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n            \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644549/6mjfvy8p2up-1759644548826-parcel-png.png.png\",\n            \"features\": [\n                \"Authentication: Email/password login, JWT, OTP verification\",\n                \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n                \"Manage users, parcels, and deliveries\",\n                \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n                \"Real-time Tracking: Track parcels by tracking ID\",\n                \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n                \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n                \"Coupon Support: Admins can create and manage coupons\",\n                \"Notifications: Email for OTP verification\",\n                \"Contact email using Emailjs\",\n                \"Global Error Handling: User-friendly error messages\"\n            ],\n            \"techStack\": [\n                \"React + Vite\",\n                \"TypeScript\",\n                \"shadcn/ui\",\n                \"Tailwind CSS\",\n                \"RTK Query\",\n                \"Recharts\",\n                \"Sonner\",\n                \"React Hook Form + Zod\",\n                \"Lucide Icons\",\n                \"Emailjs\",\n                \"Node.js + Express\",\n                \"ZOD Validation\",\n                \"MongoDB + Mongoose\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T06:09:10.150Z\",\n            \"updatedAt\": \"2025-10-05T06:09:10.150Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 16,\n            \"title\": \"Apartment Hunt\",\n            \"slug\": \"apartment-hunt\",\n            \"description\": \"Apartment Hunt is a modern web application designed to help users find their ideal living space. Built with a focus on user experience and functionality, this application features a clean interface, advanced search options, and a responsive layout. Users can easily browse through available apartments, view detailed listings, and connect with property managers.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/apartment-hunt-client\",\n            \"liveSite\": \"https://apartment-hunt-44387.web.app/\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644094/f34g0ow6e6k-1759644093812-apartmenthunt-webp.webp.webp\",\n            \"features\": [\n                \"Responsive MERN Stack project with firebase authentication, admin authentication persistent login and dashboard functionality for customer and admin\",\n                \"Client have ability to request booking for apartment, check status of requested booking from client dashboard.\",\n                \"Only admin can update the client requested booking status from pending to on going to done, add new apartment with image all the apartment details and add new admin.\",\n                \"Sign in is required to request booking for any apartment or to view client dashboard with services status.\",\n                \"Logged in client will see a button named 'Dashboard', where they can view the booking list they requested.\",\n                \"If Admin is logged in, admin will see a button named 'Admin'.\",\n                \"Only admin user have ability to view admin dashboard.\"\n            ],\n            \"techStack\": [\n                \"React JS\",\n                \"Firebase Authentication\",\n                \"React Router, Private Router\",\n                \"React Hook Form\",\n                \"Redux\",\n                \"React Redux\",\n                \"redux-devtools-extension\",\n                \"redux-thunk\",\n                \"React Context API\",\n                \"React Hook\",\n                \"Node JS\",\n                \"Express JS\",\n                \"Express file upload\",\n                \"Mongodb\",\n                \"Heroku\",\n                \"Cors\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T06:01:34.293Z\",\n            \"updatedAt\": \"2025-10-05T06:14:59.078Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 15,\n            \"title\": \"Creative Agency\",\n            \"slug\": \"creative-agency\",\n            \"description\": \"The Creative Agency is a modern web application designed to showcase the services and portfolio of a creative agency. Built with a focus on aesthetics and user experience, this application features a visually stunning interface, smooth animations, and a responsive layout. Users can easily navigate through the agency's offerings, view case studies, and get in touch with the team.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/creative-agency-client\",\n            \"liveSite\": \"https://creative-agency-ea3df.firebaseapp.com/\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759643879/valaay2wl3-1759643879305-creative-agency-feature-webp.webp.webp\",\n            \"features\": [\n                \"Responsive MERN Stack project with firebase authentication, admin authentication, persistent login and dashboard functionality for customer and admin\",\n                \"Customer have ability to register in available services, check status of service(s) registered, and provide feedback\",\n                \"Only admin can update the customer service status from pending to on going to done, add new service with image and add new admin.\",\n                \"Customer need to click on service image card to register in specific service.\",\n                \"Sign in is required to register in any service or to view Customer dashboard with services status.\",\n                \"Logged in user will see a button named - Dashboard, where they can view the services they registered.\",\n                \"If Admin is logged in, admin will see a button named - Admin.\",\n                \"Only admin user have ability to view admin dashboard.\"\n            ],\n            \"techStack\": [\n                \"React JS\",\n                \"Firebase Authentication (Google)\",\n                \"React Router, Private Router\",\n                \"React Hook Form\",\n                \"React Context API\",\n                \"React Hook\",\n                \"Firebase Hosting\",\n                \"React Spinners\",\n                \"React Spring\",\n                \"React Alice Carousel\",\n                \"Faker Api\",\n                \"Node JS\",\n                \"Express JS\",\n                \"Express file upload\",\n                \"Mongodb\",\n                \"Heroku\",\n                \"Cors\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:57:59.930Z\",\n            \"updatedAt\": \"2025-10-05T06:21:51.111Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 14,\n            \"title\": \"Volunteer Network\",\n            \"slug\": \"volunteer-network\",\n            \"description\": \"The Volunteer Network is a platform that connects volunteers with organizations in need of assistance. Built with a focus on user experience, this web application allows users to easily find and join volunteer opportunities in their area. The platform features a clean and intuitive interface, making it simple for both volunteers and organizations to navigate and manage their profiles.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/volunteer_network_server\",\n            \"liveSite\": \"https://volunteer-network-6c5bc.firebaseapp.com\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759643466/wb68nkutc7-1759643465784-volunteer-network-feature-webp.webp.webp\",\n            \"features\": [\n                \"Responsive MERN Stack project with firebase authentication and dashboard functionality for volunteer and admin.\",\n                \"Volunteer can search, register in any event and view the events they already registered.\",\n                \"Admin can view all the volunteer registered in any events and delete any volunteer if needed.\",\n                \"Admin also can add new event from admin dashboard.\",\n                \"Volunteer need to click on event image to register in specific event.\",\n                \"Sign in is required to register in any event or to view volunteer dashboard.\",\n                \"Logged in volunteer will see a button named \\\"My Tasks\\\", where they can view the events they registered.\",\n                \"Volunteer can login through gmail or email and password if registered.\"\n            ],\n            \"techStack\": [\n                \"ReactJS\",\n                \"Firebase Authentication (Google, Email/ Password)\",\n                \"React Router, Private Router\",\n                \"React Hook Form\",\n                \"React Context API\",\n                \"React Hook\",\n                \"Firebase Hosting\",\n                \"Bootstrap\",\n                \"CSS3\",\n                \"FontAwesome\",\n                \"Faker Api\",\n                \"Node JS\",\n                \"Express JS\",\n                \"Mongodb\",\n                \"Heroku\",\n                \"Cors\",\n                \"Body parser\",\n                \"Dotenv\",\n                \"nodemon\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:51:06.468Z\",\n            \"updatedAt\": \"2025-10-05T05:51:06.468Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 13,\n            \"title\": \"Nivo Tailwindcss Dashboard\",\n            \"slug\": \"nivo-tailwindcss-dashboard\",\n            \"description\": \"The Nivo TailwindCSS Dashboard is a sleek and responsive web dashboard built using TailwindCSS and Nivo.js. It combines elegant UI components with powerful data visualizations to provide a highly interactive and user-friendly interface. Designed for quick customization, this dashboard features a clean layout, intuitive navigation, and several built-in charts, making it perfect for applications that require dynamic data presentation.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/nivo-tailwindcss-dashboard\",\n            \"liveSite\": \"https://nivo-tailwindcss-dashboard.netlify.app\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759642743/r3zq3sgaxkl-1759642743750-nivo-tailwindcss-dashboard-feature-webp.webp.webp\",\n            \"features\": [\n                \"Utilizes Nivo.js for interactive, customizable charts and graphs, including bar charts, line charts, pie charts, and more\",\n                \"Fully responsive and optimized for all screen sizes, ensuring a seamless experience on mobile, tablet, and desktop.\",\n                \"Features a minimalist and professional design, with a focus on readability and ease of use, providing a polished interface\",\n                \"Toggle between dark and light modes to suit different user preferences and environments\"\n            ],\n            \"techStack\": [\n                \"React\",\n                \"Tailwind\",\n                \"React-Select\",\n                \"Nivo\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:39:04.270Z\",\n            \"updatedAt\": \"2025-10-05T05:39:04.270Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 12,\n            \"title\": \"Next world\",\n            \"slug\": \"next-world\",\n            \"description\": \"A comprehensive admin dashboard for managing e-commerce operations with real-time analytics, inventory management, and order processing capabilities.\",\n            \"projectLink\": \"https://github.com/johndoe/ecommerce-dashboard\",\n            \"liveSite\": \"https://ecommerce-dash.vercel.app\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759641456/9fa6z3aqj7c-1759641455596-mildlee-8n6z4yxukwy-unsplash-jpg.jpg.jpg\",\n            \"features\": [\n                \"Real-time analytics\",\n                \"Inventory management\",\n                \"Order processing\",\n                \"Customer management\",\n                \"Payment integration\",\n                \"Report generation\"\n            ],\n            \"techStack\": [\n                \"Next\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:17:37.181Z\",\n            \"updatedAt\": \"2025-10-05T05:17:37.181Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 10,\n            \"title\": \"Cum qui autem elit \",\n            \"slug\": \"cum-qui-autem-elit\",\n            \"description\": \"Iste eum deserunt vo\",\n            \"projectLink\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"liveSite\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759469387/09uip7cxmuwu-1759469387131-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"features\": [\n                \"sas\",\n                \"qweqweq\"\n            ],\n            \"techStack\": [\n                \"sdsa\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T05:29:47.525Z\",\n            \"updatedAt\": \"2025-10-03T16:49:57.215Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 9,\n            \"title\": \"Totam perferendis et\",\n            \"slug\": \"totam-perferendis-et\",\n            \"description\": \"Commodi id quibusdam\",\n            \"projectLink\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"liveSite\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759469361/3rz13v47lof-1759469360856-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"features\": [\n                \"Id libero incididun\"\n            ],\n            \"techStack\": [\n                \"Quod dolore illum d\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T05:29:21.531Z\",\n            \"updatedAt\": \"2025-10-03T05:29:21.531Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 8,\n            \"title\": \"Rerum occaecat reici\",\n            \"slug\": \"rerum-occaecat-reici\",\n            \"description\": \"Perspiciatis aliqua\",\n            \"projectLink\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"liveSite\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759469196/m7nsqp95vjg-1759469196590-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"features\": [\n                \"Adipisicing labore e\"\n            ],\n            \"techStack\": [\n                \"Ea esse expedita exc\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T05:26:37.182Z\",\n            \"updatedAt\": \"2025-10-03T05:26:37.182Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get Single Project with slug",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project/parcel-delivery-system",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project",
										"parcel-delivery-system"
									]
								}
							},
							"response": [
								{
									"name": "Get Single Project with slug",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project/parcel-delivery-system",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project",
												"parcel-delivery-system"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1599"
										},
										{
											"key": "ETag",
											"value": "W/\"63f-GFfV5j6LYpQ3DtlwFHGgL1R21pI\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:17:20 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Project retrieved successfully\",\n    \"data\": {\n        \"id\": 17,\n        \"title\": \"parcel Delivery System\",\n        \"slug\": \"parcel-delivery-system\",\n        \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n        \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n        \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644549/6mjfvy8p2up-1759644548826-parcel-png.png.png\",\n        \"features\": [\n            \"Authentication: Email/password login, JWT, OTP verification\",\n            \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n            \"Manage users, parcels, and deliveries\",\n            \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n            \"Real-time Tracking: Track parcels by tracking ID\",\n            \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n            \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n            \"Coupon Support: Admins can create and manage coupons\",\n            \"Notifications: Email for OTP verification\",\n            \"Contact email using Emailjs\",\n            \"Global Error Handling: User-friendly error messages\"\n        ],\n        \"techStack\": [\n            \"React + Vite\",\n            \"TypeScript\",\n            \"shadcn/ui\",\n            \"Tailwind CSS\",\n            \"RTK Query\",\n            \"Recharts\",\n            \"Sonner\",\n            \"React Hook Form + Zod\",\n            \"Lucide Icons\",\n            \"Emailjs\",\n            \"Node.js + Express\",\n            \"ZOD Validation\",\n            \"MongoDB + Mongoose\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"ownerId\": 2,\n        \"createdAt\": \"2025-10-05T06:09:10.150Z\",\n        \"updatedAt\": \"2025-10-05T06:09:10.150Z\"\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Create Project",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"value": "{\n  \"title\": \"parcel Delivery System\",\n  \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n  \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n  \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n  \"features\": [\n    \"Authentication: Email/password login, JWT, OTP verification\",\n    \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n    \"Manage users, parcels, and deliveries\",\n    \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n    \"Real-time Tracking: Track parcels by tracking ID\",\n    \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n    \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n    \"Coupon Support: Admins can create and manage coupons\",\n    \"Notifications: Email for OTP verification\",\n    \"Contact email using Emailjs\",\n    \"Global Error Handling: User-friendly error messages\"\n  ],\n  \"techStack\": [\n    \"React + Vite\",\n    \"TypeScript\",\n    \"shadcn/ui\",\n    \"Tailwind CSS\",\n    \"RTK Query\",\n    \"Recharts\",\n    \"Sonner\",\n    \"React Hook Form + Zod\",\n    \"Lucide Icons\",\n    \"Emailjs\",\n    \"Node.js + Express\",\n    \"ZOD Validation\",\n    \"MongoDB + Mongoose\"\n],\n  \"isFeatured\": true,\n  \"isPublished\": true\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/Users/faisal/Downloads/b5a7-images/project/parcel.png"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project",
										"create"
									]
								}
							},
							"response": [
								{
									"name": "Create Project",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "data",
													"value": "{\n  \"title\": \"parcel Delivery System\",\n  \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n  \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n  \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n  \"features\": [\n    \"Authentication: Email/password login, JWT, OTP verification\",\n    \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n    \"Manage users, parcels, and deliveries\",\n    \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n    \"Real-time Tracking: Track parcels by tracking ID\",\n    \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n    \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n    \"Coupon Support: Admins can create and manage coupons\",\n    \"Notifications: Email for OTP verification\",\n    \"Contact email using Emailjs\",\n    \"Global Error Handling: User-friendly error messages\"\n  ],\n  \"techStack\": [\n    \"React + Vite\",\n    \"TypeScript\",\n    \"shadcn/ui\",\n    \"Tailwind CSS\",\n    \"RTK Query\",\n    \"Recharts\",\n    \"Sonner\",\n    \"React Hook Form + Zod\",\n    \"Lucide Icons\",\n    \"Emailjs\",\n    \"Node.js + Express\",\n    \"ZOD Validation\",\n    \"MongoDB + Mongoose\"\n],\n  \"isFeatured\": true,\n  \"isPublished\": true\n}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/Users/faisal/Downloads/b5a7-images/project/parcel.png"
												}
											]
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project/create",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project",
												"create"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1597"
										},
										{
											"key": "ETag",
											"value": "W/\"63d-1/i1K3B4aFhhqjbtCGBXK5qorMA\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:09:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 201,\n    \"success\": true,\n    \"message\": \"Project created successfully\",\n    \"data\": {\n        \"id\": 17,\n        \"title\": \"parcel Delivery System\",\n        \"slug\": \"parcel-delivery-system\",\n        \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n        \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n        \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644549/6mjfvy8p2up-1759644548826-parcel-png.png.png\",\n        \"features\": [\n            \"Authentication: Email/password login, JWT, OTP verification\",\n            \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n            \"Manage users, parcels, and deliveries\",\n            \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n            \"Real-time Tracking: Track parcels by tracking ID\",\n            \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n            \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n            \"Coupon Support: Admins can create and manage coupons\",\n            \"Notifications: Email for OTP verification\",\n            \"Contact email using Emailjs\",\n            \"Global Error Handling: User-friendly error messages\"\n        ],\n        \"techStack\": [\n            \"React + Vite\",\n            \"TypeScript\",\n            \"shadcn/ui\",\n            \"Tailwind CSS\",\n            \"RTK Query\",\n            \"Recharts\",\n            \"Sonner\",\n            \"React Hook Form + Zod\",\n            \"Lucide Icons\",\n            \"Emailjs\",\n            \"Node.js + Express\",\n            \"ZOD Validation\",\n            \"MongoDB + Mongoose\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"ownerId\": 2,\n        \"createdAt\": \"2025-10-05T06:09:10.150Z\",\n        \"updatedAt\": \"2025-10-05T06:09:10.150Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get All Projects- Admin",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "hello",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "id",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "isFeatured",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Get All Projects",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project"
											],
											"query": [
												{
													"key": "searchTerm",
													"value": "hello",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "isFeatured",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12737"
										},
										{
											"key": "ETag",
											"value": "W/\"31c1-Fsa7xbPOzSs9HGt/WJ0+hBexqIQ\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:17:48 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Projects retrieved successfully\",\n    \"meta\": {\n        \"total\": 11,\n        \"page\": 1,\n        \"limit\": 50\n    },\n    \"data\": [\n        {\n            \"id\": 17,\n            \"title\": \"parcel Delivery System\",\n            \"slug\": \"parcel-delivery-system\",\n            \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n            \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644549/6mjfvy8p2up-1759644548826-parcel-png.png.png\",\n            \"features\": [\n                \"Authentication: Email/password login, JWT, OTP verification\",\n                \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n                \"Manage users, parcels, and deliveries\",\n                \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n                \"Real-time Tracking: Track parcels by tracking ID\",\n                \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n                \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n                \"Coupon Support: Admins can create and manage coupons\",\n                \"Notifications: Email for OTP verification\",\n                \"Contact email using Emailjs\",\n                \"Global Error Handling: User-friendly error messages\"\n            ],\n            \"techStack\": [\n                \"React + Vite\",\n                \"TypeScript\",\n                \"shadcn/ui\",\n                \"Tailwind CSS\",\n                \"RTK Query\",\n                \"Recharts\",\n                \"Sonner\",\n                \"React Hook Form + Zod\",\n                \"Lucide Icons\",\n                \"Emailjs\",\n                \"Node.js + Express\",\n                \"ZOD Validation\",\n                \"MongoDB + Mongoose\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T06:09:10.150Z\",\n            \"updatedAt\": \"2025-10-05T06:09:10.150Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 16,\n            \"title\": \"Apartment Hunt\",\n            \"slug\": \"apartment-hunt\",\n            \"description\": \"Apartment Hunt is a modern web application designed to help users find their ideal living space. Built with a focus on user experience and functionality, this application features a clean interface, advanced search options, and a responsive layout. Users can easily browse through available apartments, view detailed listings, and connect with property managers.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/apartment-hunt-client\",\n            \"liveSite\": \"https://apartment-hunt-44387.web.app/\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644094/f34g0ow6e6k-1759644093812-apartmenthunt-webp.webp.webp\",\n            \"features\": [\n                \"Responsive MERN Stack project with firebase authentication, admin authentication persistent login and dashboard functionality for customer and admin\",\n                \"Client have ability to request booking for apartment, check status of requested booking from client dashboard.\",\n                \"Only admin can update the client requested booking status from pending to on going to done, add new apartment with image all the apartment details and add new admin.\",\n                \"Sign in is required to request booking for any apartment or to view client dashboard with services status.\",\n                \"Logged in client will see a button named 'Dashboard', where they can view the booking list they requested.\",\n                \"If Admin is logged in, admin will see a button named 'Admin'.\",\n                \"Only admin user have ability to view admin dashboard.\"\n            ],\n            \"techStack\": [\n                \"React JS\",\n                \"Firebase Authentication\",\n                \"React Router, Private Router\",\n                \"React Hook Form\",\n                \"Redux\",\n                \"React Redux\",\n                \"redux-devtools-extension\",\n                \"redux-thunk\",\n                \"React Context API\",\n                \"React Hook\",\n                \"Node JS\",\n                \"Express JS\",\n                \"Express file upload\",\n                \"Mongodb\",\n                \"Heroku\",\n                \"Cors\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T06:01:34.293Z\",\n            \"updatedAt\": \"2025-10-05T06:14:59.078Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 15,\n            \"title\": \"Creative Agency\",\n            \"slug\": \"creative-agency\",\n            \"description\": \"The Creative Agency is a modern web application designed to showcase the services and portfolio of a creative agency. Built with a focus on aesthetics and user experience, this application features a visually stunning interface, smooth animations, and a responsive layout. Users can easily navigate through the agency's offerings, view case studies, and get in touch with the team.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/creative-agency-client\",\n            \"liveSite\": \"https://github.com/faisal-akbar/creative-agency-client\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759643879/valaay2wl3-1759643879305-creative-agency-feature-webp.webp.webp\",\n            \"features\": [\n                \"Responsive MERN Stack project with firebase authentication, admin authentication, persistent login and dashboard functionality for customer and admin\",\n                \"Customer have ability to register in available services, check status of service(s) registered, and provide feedback\",\n                \"Only admin can update the customer service status from pending to on going to done, add new service with image and add new admin.\",\n                \"Customer need to click on service image card to register in specific service.\",\n                \"Sign in is required to register in any service or to view Customer dashboard with services status.\",\n                \"Logged in user will see a button named - Dashboard, where they can view the services they registered.\",\n                \"If Admin is logged in, admin will see a button named - Admin.\",\n                \"Only admin user have ability to view admin dashboard.\"\n            ],\n            \"techStack\": [\n                \"React JS\",\n                \"Firebase Authentication (Google)\",\n                \"React Router, Private Router\",\n                \"React Hook Form\",\n                \"React Context API\",\n                \"React Hook\",\n                \"Firebase Hosting\",\n                \"React Spinners\",\n                \"React Spring\",\n                \"React Alice Carousel\",\n                \"Faker Api\",\n                \"Node JS\",\n                \"Express JS\",\n                \"Express file upload\",\n                \"Mongodb\",\n                \"Heroku\",\n                \"Cors\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:57:59.930Z\",\n            \"updatedAt\": \"2025-10-05T05:57:59.930Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 14,\n            \"title\": \"Volunteer Network\",\n            \"slug\": \"volunteer-network\",\n            \"description\": \"The Volunteer Network is a platform that connects volunteers with organizations in need of assistance. Built with a focus on user experience, this web application allows users to easily find and join volunteer opportunities in their area. The platform features a clean and intuitive interface, making it simple for both volunteers and organizations to navigate and manage their profiles.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/volunteer_network_server\",\n            \"liveSite\": \"https://volunteer-network-6c5bc.firebaseapp.com\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759643466/wb68nkutc7-1759643465784-volunteer-network-feature-webp.webp.webp\",\n            \"features\": [\n                \"Responsive MERN Stack project with firebase authentication and dashboard functionality for volunteer and admin.\",\n                \"Volunteer can search, register in any event and view the events they already registered.\",\n                \"Admin can view all the volunteer registered in any events and delete any volunteer if needed.\",\n                \"Admin also can add new event from admin dashboard.\",\n                \"Volunteer need to click on event image to register in specific event.\",\n                \"Sign in is required to register in any event or to view volunteer dashboard.\",\n                \"Logged in volunteer will see a button named \\\"My Tasks\\\", where they can view the events they registered.\",\n                \"Volunteer can login through gmail or email and password if registered.\"\n            ],\n            \"techStack\": [\n                \"ReactJS\",\n                \"Firebase Authentication (Google, Email/ Password)\",\n                \"React Router, Private Router\",\n                \"React Hook Form\",\n                \"React Context API\",\n                \"React Hook\",\n                \"Firebase Hosting\",\n                \"Bootstrap\",\n                \"CSS3\",\n                \"FontAwesome\",\n                \"Faker Api\",\n                \"Node JS\",\n                \"Express JS\",\n                \"Mongodb\",\n                \"Heroku\",\n                \"Cors\",\n                \"Body parser\",\n                \"Dotenv\",\n                \"nodemon\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:51:06.468Z\",\n            \"updatedAt\": \"2025-10-05T05:51:06.468Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 13,\n            \"title\": \"Nivo Tailwindcss Dashboard\",\n            \"slug\": \"nivo-tailwindcss-dashboard\",\n            \"description\": \"The Nivo TailwindCSS Dashboard is a sleek and responsive web dashboard built using TailwindCSS and Nivo.js. It combines elegant UI components with powerful data visualizations to provide a highly interactive and user-friendly interface. Designed for quick customization, this dashboard features a clean layout, intuitive navigation, and several built-in charts, making it perfect for applications that require dynamic data presentation.\",\n            \"projectLink\": \"https://github.com/faisal-akbar/nivo-tailwindcss-dashboard\",\n            \"liveSite\": \"https://nivo-tailwindcss-dashboard.netlify.app\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759642743/r3zq3sgaxkl-1759642743750-nivo-tailwindcss-dashboard-feature-webp.webp.webp\",\n            \"features\": [\n                \"Utilizes Nivo.js for interactive, customizable charts and graphs, including bar charts, line charts, pie charts, and more\",\n                \"Fully responsive and optimized for all screen sizes, ensuring a seamless experience on mobile, tablet, and desktop.\",\n                \"Features a minimalist and professional design, with a focus on readability and ease of use, providing a polished interface\",\n                \"Toggle between dark and light modes to suit different user preferences and environments\"\n            ],\n            \"techStack\": [\n                \"React\",\n                \"Tailwind\",\n                \"React-Select\",\n                \"Nivo\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:39:04.270Z\",\n            \"updatedAt\": \"2025-10-05T05:39:04.270Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 12,\n            \"title\": \"Next world\",\n            \"slug\": \"next-world\",\n            \"description\": \"A comprehensive admin dashboard for managing e-commerce operations with real-time analytics, inventory management, and order processing capabilities.\",\n            \"projectLink\": \"https://github.com/johndoe/ecommerce-dashboard\",\n            \"liveSite\": \"https://ecommerce-dash.vercel.app\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759641456/9fa6z3aqj7c-1759641455596-mildlee-8n6z4yxukwy-unsplash-jpg.jpg.jpg\",\n            \"features\": [\n                \"Real-time analytics\",\n                \"Inventory management\",\n                \"Order processing\",\n                \"Customer management\",\n                \"Payment integration\",\n                \"Report generation\"\n            ],\n            \"techStack\": [\n                \"Next\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-05T05:17:37.181Z\",\n            \"updatedAt\": \"2025-10-05T05:17:37.181Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 11,\n            \"title\": \"Consequatur Nisi fudasdasdadasda\",\n            \"slug\": \"consequatur-nisi-fudasdasdadasda\",\n            \"description\": \"Mollitia irure duis \",\n            \"projectLink\": \"http://localhost:3000/dashboard/about\",\n            \"liveSite\": \"http://localhost:3000/dashboard/about magnam \",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759510241/3owjvgp37uh-1759510241286-15cpbnzqnvaz-jzmktfguja-png.png.png\",\n            \"features\": [\n                \"Vitae voluptatem pe\"\n            ],\n            \"techStack\": [\n                \"In qui culpa sit vo\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": false,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T16:50:42.079Z\",\n            \"updatedAt\": \"2025-10-04T19:33:59.848Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 10,\n            \"title\": \"Cum qui autem elit \",\n            \"slug\": \"cum-qui-autem-elit\",\n            \"description\": \"Iste eum deserunt vo\",\n            \"projectLink\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"liveSite\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759469387/09uip7cxmuwu-1759469387131-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"features\": [\n                \"sas\",\n                \"qweqweq\"\n            ],\n            \"techStack\": [\n                \"sdsa\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T05:29:47.525Z\",\n            \"updatedAt\": \"2025-10-03T16:49:57.215Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 9,\n            \"title\": \"Totam perferendis et\",\n            \"slug\": \"totam-perferendis-et\",\n            \"description\": \"Commodi id quibusdam\",\n            \"projectLink\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"liveSite\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759469361/3rz13v47lof-1759469360856-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"features\": [\n                \"Id libero incididun\"\n            ],\n            \"techStack\": [\n                \"Quod dolore illum d\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T05:29:21.531Z\",\n            \"updatedAt\": \"2025-10-03T05:29:21.531Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 8,\n            \"title\": \"Rerum occaecat reici\",\n            \"slug\": \"rerum-occaecat-reici\",\n            \"description\": \"Perspiciatis aliqua\",\n            \"projectLink\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"liveSite\": \"http://localhost:3000/dashboard/projects/add-project\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759469196/m7nsqp95vjg-1759469196590-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"features\": [\n                \"Adipisicing labore e\"\n            ],\n            \"techStack\": [\n                \"Ea esse expedita exc\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T05:26:37.182Z\",\n            \"updatedAt\": \"2025-10-03T05:26:37.182Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 7,\n            \"title\": \"Expedita similique i\",\n            \"slug\": \"expedita-similique-i\",\n            \"description\": \"Aliquid minima venia\",\n            \"projectLink\": \"https://github.com/\",\n            \"liveSite\": \"https://github.com/\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759466225/ku7u1qnkye8-1759466225712-about-jpg.jpg.jpg\",\n            \"features\": [\n                \"Nobis accusantium ve\"\n            ],\n            \"techStack\": [\n                \"Et consequuntur amet\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"ownerId\": 2,\n            \"createdAt\": \"2025-10-03T04:37:06.467Z\",\n            \"updatedAt\": \"2025-10-03T05:20:49.767Z\",\n            \"owner\": {\n                \"name\": \"Super admin\"\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get Single Project by Id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project/id/17",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project",
										"id",
										"17"
									]
								}
							},
							"response": [
								{
									"name": "Get Single Project with Id",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [],
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project/id/17",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project",
												"id",
												"17"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1599"
										},
										{
											"key": "ETag",
											"value": "W/\"63f-GFfV5j6LYpQ3DtlwFHGgL1R21pI\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:16:39 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Project retrieved successfully\",\n    \"data\": {\n        \"id\": 17,\n        \"title\": \"parcel Delivery System\",\n        \"slug\": \"parcel-delivery-system\",\n        \"description\": \"A modern, modular, and secure web application for managing parcel deliveries. Built with React, TypeScript, shadcn/ui, RTK Query, and Recharts for analytics.\",\n        \"projectLink\": \"https://github.com/faisal-akbar/b5b6-frontend\",\n        \"liveSite\": \"https://b5a6-frontend.vercel.app/\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644549/6mjfvy8p2up-1759644548826-parcel-png.png.png\",\n        \"features\": [\n            \"Authentication: Email/password login, JWT, OTP verification\",\n            \"Role-based Access to dashboard: Sender, Receiver, Admin, Super Admin, Delivery Personnel\",\n            \"Manage users, parcels, and deliveries\",\n            \"Parcel Lifecycle: Request, Approve, Picked, Dispatch, In Transit, Deliver, Block, Cancel, Flagged\",\n            \"Real-time Tracking: Track parcels by tracking ID\",\n            \"Status Analytics: Bar and Pie charts for delivery status, parcel type, shipping type, and trends\",\n            \"Responsive UI: Modern design with shadcn/ui and Tailwind CSS\",\n            \"Coupon Support: Admins can create and manage coupons\",\n            \"Notifications: Email for OTP verification\",\n            \"Contact email using Emailjs\",\n            \"Global Error Handling: User-friendly error messages\"\n        ],\n        \"techStack\": [\n            \"React + Vite\",\n            \"TypeScript\",\n            \"shadcn/ui\",\n            \"Tailwind CSS\",\n            \"RTK Query\",\n            \"Recharts\",\n            \"Sonner\",\n            \"React Hook Form + Zod\",\n            \"Lucide Icons\",\n            \"Emailjs\",\n            \"Node.js + Express\",\n            \"ZOD Validation\",\n            \"MongoDB + Mongoose\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"ownerId\": 2,\n        \"createdAt\": \"2025-10-05T06:09:10.150Z\",\n        \"updatedAt\": \"2025-10-05T06:09:10.150Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update Project",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"value": "{\n  \"liveSite\": \"https://apartment-hunt-44387.web.app/\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project/16",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project",
										"16"
									]
								}
							},
							"response": [
								{
									"name": "Update Project",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "data",
													"value": "{\n  \"liveSite\": \"https://apartment-hunt-44387.web.app/\"\n}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project/16",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project",
												"16"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1948"
										},
										{
											"key": "ETag",
											"value": "W/\"79c-oeYWylHWBI+SB+Eqed2m2dwOd7Y\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:14:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Project updated successfully\",\n    \"data\": {\n        \"id\": 16,\n        \"title\": \"Apartment Hunt\",\n        \"slug\": \"apartment-hunt\",\n        \"description\": \"Apartment Hunt is a modern web application designed to help users find their ideal living space. Built with a focus on user experience and functionality, this application features a clean interface, advanced search options, and a responsive layout. Users can easily browse through available apartments, view detailed listings, and connect with property managers.\",\n        \"projectLink\": \"https://github.com/faisal-akbar/apartment-hunt-client\",\n        \"liveSite\": \"https://apartment-hunt-44387.web.app/\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759644094/f34g0ow6e6k-1759644093812-apartmenthunt-webp.webp.webp\",\n        \"features\": [\n            \"Responsive MERN Stack project with firebase authentication, admin authentication persistent login and dashboard functionality for customer and admin\",\n            \"Client have ability to request booking for apartment, check status of requested booking from client dashboard.\",\n            \"Only admin can update the client requested booking status from pending to on going to done, add new apartment with image all the apartment details and add new admin.\",\n            \"Sign in is required to request booking for any apartment or to view client dashboard with services status.\",\n            \"Logged in client will see a button named 'Dashboard', where they can view the booking list they requested.\",\n            \"If Admin is logged in, admin will see a button named 'Admin'.\",\n            \"Only admin user have ability to view admin dashboard.\"\n        ],\n        \"techStack\": [\n            \"React JS\",\n            \"Firebase Authentication\",\n            \"React Router, Private Router\",\n            \"React Hook Form\",\n            \"Redux\",\n            \"React Redux\",\n            \"redux-devtools-extension\",\n            \"redux-thunk\",\n            \"React Context API\",\n            \"React Hook\",\n            \"Node JS\",\n            \"Express JS\",\n            \"Express file upload\",\n            \"Mongodb\",\n            \"Heroku\",\n            \"Cors\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"ownerId\": 2,\n        \"createdAt\": \"2025-10-05T06:01:34.293Z\",\n        \"updatedAt\": \"2025-10-05T06:14:59.078Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Delete Project",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/project/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"project",
										"3"
									]
								}
							},
							"response": [
								{
									"name": "Delete Project",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/project/7",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"project",
												"7"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "577"
										},
										{
											"key": "ETag",
											"value": "W/\"241-KlYynqoxNWfwoyIe56OQhbMDDGU\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:18:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Project deleted successfully\",\n    \"data\": {\n        \"id\": 7,\n        \"title\": \"Expedita similique i\",\n        \"slug\": \"expedita-similique-i\",\n        \"description\": \"Aliquid minima venia\",\n        \"projectLink\": \"https://github.com/\",\n        \"liveSite\": \"https://github.com/\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759466225/ku7u1qnkye8-1759466225712-about-jpg.jpg.jpg\",\n        \"features\": [\n            \"Nobis accusantium ve\"\n        ],\n        \"techStack\": [\n            \"Et consequuntur amet\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"ownerId\": 2,\n        \"createdAt\": \"2025-10-03T04:37:06.467Z\",\n        \"updatedAt\": \"2025-10-03T05:20:49.767Z\"\n    }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Blog",
			"item": [
				{
					"name": "Public",
					"item": [
						{
							"name": "Get Published blogs",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog/published",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog",
										"published"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "hello",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "id",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "isFeatured",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Get Published blogs",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog/published",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog",
												"published"
											],
											"query": [
												{
													"key": "searchTerm",
													"value": "hello",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "isFeatured",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "83964"
										},
										{
											"key": "ETag",
											"value": "W/\"147fc-KjWPrVSHGIa4Ko5Mn3M+4WXEvvg\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:35:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Published blogs retrieved successfully\",\n    \"meta\": {\n        \"total\": 7,\n        \"page\": 1,\n        \"limit\": 50\n    },\n    \"data\": [\n        {\n            \"id\": 11,\n            \"title\": \"Simplifying Server Actions in Modern Web Development\",\n            \"slug\": \"simplifying-server-actions-in-modern-web-development\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506765/64aqiaqq3l7-1759506765096-15cpbnzqnvaz-jzmktfguja-png.png.png\",\n            \"content\": \"<p>In modern web development, handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end, enabling developers to write server-side code directly within their components or routes.</p><p>In this blog post, we’ll dive into what server actions are, how they work, their benefits, and how you can integrate them into your web applications.</p><h3>What Are Server Actions?</h3><p><strong>Server actions</strong> are a way of executing server-side code directly from the client side, often integrated into frameworks like Next.js. Instead of creating separate API routes for every server-side operation, server actions allow developers to define server-side logic within their React components or other parts of the application.</p><p>This approach brings the power of server-side functionality (like database queries, authentication checks, and data manipulation) to client-side components without needing to manage separate API endpoints. Server actions can simplify how developers handle common tasks like data fetching, authentication, and form submissions.</p><h3>How Do Server Actions Work?</h3><p>Typically, server actions allow you to write server-side logic within specific React components or routes, and the server takes care of executing this code when triggered by the client. When a request is made, the server action handles the logic and returns a response to the client.</p><p>For example, in <strong>Next.js</strong>, server actions work seamlessly with API routes and React components. These actions are executed server-side but can be called directly from your front-end code. This reduces the need to create separate APIs and allows for a more integrated approach to server-client communication.</p><p>Here’s a simplified example in Next.js:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// In your React component</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// This will run on the server side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromDatabase();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function Page() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchData();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>In this example:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The fetchData function is executed on the server, fetching data from a database or API.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The async function allows for the handling of asynchronous code like database queries or API calls.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The response is sent back to the component, and the user can interact with it in the UI.</li></ol><h3>Benefits of Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Reduced Complexity</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> One of the biggest advantages of server actions is that they allow you to move server-side logic directly into your React components. This eliminates the need to create separate API endpoints or manage a server-side framework for each task, making your codebase simpler and more maintainable.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Development</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Since server actions remove the need for explicit API routes, you can quickly implement server-side functionality and avoid the extra boilerplate of creating RESTful or GraphQL endpoints. This can speed up your development process significantly.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Data Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions allow for direct interaction with server-side resources, like databases or external APIs, without the overhead of multiple HTTP requests. This can result in more efficient data fetching, especially for tasks that involve complex server-side processing or logic.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> By executing server-side logic directly, you reduce the number of HTTP requests between the client and server. This can lead to improved performance, as the server can respond directly with the required data, avoiding unnecessary round trips.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server-Side Rendering (SSR) Integration</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> In frameworks like Next.js, server actions fit naturally with Server-Side Rendering (SSR) workflows. Server actions can be invoked during SSR, allowing for faster page loads and better SEO.</li></ol><h3>Use Cases for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Data Fetching</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are perfect for fetching data that requires complex processing or access to private resources like databases or third-party services.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function getUserData(userId) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const userData = await fetchUserDataFromDB(userId);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return userData;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Authentication and Authorization</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can simplify authentication logic. You can handle authentication and authorization checks directly in the component, which would traditionally require a separate API route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function loginUser(credentials) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const user = await authenticate(credentials);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">if (!user) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">throw new Error('Invalid credentials');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return user;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Form Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions make form submission and processing much easier by eliminating the need for an additional API endpoint. You can directly handle form submissions on the server.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function submitForm(data) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const response = await submitFormDataToDatabase(data);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return response;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File Uploads</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can also handle file uploads, as they allow you to directly interact with server-side logic to manage files, store them in cloud storage, or process them as needed.</li></ol><h3>Implementing Server Actions in Next.js</h3><p>In <strong>Next.js 13+</strong>, server actions have been tightly integrated with the app router and are built to be easy to use. Here’s an example of how to implement a server action in Next.js:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Define a Server Action</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/actions.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export async function fetchDataFromServer() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromAPI();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Call Server Action in the Component</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">import { fetchDataFromServer } from './actions';</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function HomePage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchDataFromServer();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>This example showcases how to define a server action (fetchDataFromServer) in a separate file and then call it from your component. It’s a simple and clean way to keep your code organized while executing server-side logic.</p><h3>Best Practices for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Separation of Concerns</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Although server actions simplify the workflow, it’s still important to keep business logic separate from UI logic. Maintain clarity by placing complex server-side operations in dedicated functions or service files.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Error Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Always implement proper error handling in server actions. Since server actions are asynchronous, ensure that errors are caught and handled gracefully to avoid crashes or unexpected behavior.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Avoid Overuse</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are great for tasks that require server-side logic, but they might not always be the best solution for tasks like static data fetching. Use them judiciously to avoid cluttering your components with too much server-side code.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Security</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> When implementing server actions, always keep security in mind. Ensure that sensitive data is properly protected, and avoid exposing private resources unnecessarily.</li></ol><h3>Conclusion</h3><p>Server actions are a game-changer for modern web development, simplifying how we handle server-side logic and improving the overall performance and maintainability of applications. By enabling direct interaction with the server from within your components, server actions eliminate the need for complex API routes and reduce boilerplate code.</p><p>If you're working with frameworks like Next.js, incorporating server actions into your workflow can significantly enhance your development experience and allow for more efficient, scalable applications. Whether you're handling data fetching, form submissions, or authentication, server actions provide a clean, integrated solution for many common tasks.</p><p>Embrace server actions in your next project and simplify how you handle server-side logic.</p><p><br></p><p><br></p>\",\n            \"excerpt\": \"Handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end\",\n            \"tags\": [],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 56,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:52:45.945Z\",\n            \"updatedAt\": \"2025-10-05T06:31:53.194Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 10,\n            \"title\": \"Understanding Role-Based Access Control (RBAC)\",\n            \"slug\": \"understanding-role-based-access-control-(rbac)\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506566/f14idct2sbt-1759506565900-ab0d45a55f0c41a243093fb57d460fc366fed9ab-6336x3952-png.png.png\",\n            \"content\": \"<p>In the world of software development, ensuring that users have the correct permissions to access resources is crucial for both security and user experience. One of the most common ways to manage access control is <strong>Role-Based Access Control (RBAC)</strong>. RBAC helps define and enforce policies that govern what actions a user can perform based on their role in the system.</p><p>In this blog post, we’ll explore what RBAC is, how it works, its benefits, and how you can implement it in your application.</p><h3>What is Role-Based Access Control (RBAC)?</h3><p>Role-Based Access Control (RBAC) is a method of restricting access to resources based on the roles assigned to users. Rather than assigning permissions to individual users, roles are defined and users are assigned to these roles. Each role has a set of permissions, which determine what actions a user in that role can perform.</p><p>In simple terms, RBAC allows you to manage <strong>who</strong> can access what resources and <strong>what</strong> they can do with those resources based on their role.</p><h4>Key Components of RBAC:</h4><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Users</strong>: The individuals who interact with the system (e.g., employees, administrators, or customers).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Roles</strong>: Predefined categories that group users based on their job functions or responsibilities (e.g., admin, manager, user).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Permissions</strong>: The allowed actions that a role can perform on a resource (e.g., read, write, delete).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Resources</strong>: The objects or data within the system that require protection (e.g., files, database entries, or APIs).</li></ol><h3>How RBAC Works</h3><p>RBAC assigns roles to users and then grants those roles specific permissions. Permissions dictate what actions can be performed on a resource, such as viewing, creating, updating, or deleting data.</p><p>For example, consider a content management system (CMS):</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Admins</strong>: Can create, update, delete, and view content.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Editors</strong>: Can create, update, and view content, but cannot delete content.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Viewers</strong>: Can only view content.</li></ol><p>In this case:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The <strong>admin</strong> role has the highest permissions.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The <strong>editor</strong> role has fewer permissions, and the <strong>viewer</strong> role has the least.</li></ol><h3>Types of RBAC Models</h3><p>RBAC can be implemented in several ways, depending on the complexity and the needs of the application:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Basic RBAC (User-Role-Permission)</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> In this model, users are assigned one or more roles, and roles are granted a set of permissions. It’s the most common model used in many applications.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>User: <strong>Alice</strong></li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Role: <strong>Admin</strong></li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Permissions: <strong>Create, Update, Delete, View</strong></li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Hierarchical RBAC</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> This model extends the basic RBAC by allowing roles to inherit permissions from other roles. This is useful for organizations where there is a need for role inheritance, such as in enterprise-level systems.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Admin</strong> → Can access all resources</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager</strong> → Can access all resources of their department, but not all resources</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Employee</strong> → Can access only their own department’s resources</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>This helps maintain a clear and scalable access control system.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Attribute-Based RBAC</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> This model adds another layer by including user attributes (such as department or location) along with roles. This allows for more granular control over access permissions.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager of Sales</strong> → Has access to sales data</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager of Marketing</strong> → Has access to marketing data</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>By adding attributes, you can create more flexible policies beyond simple roles.</li></ol><h3>Benefits of RBAC</h3><p>RBAC is widely used because of its many benefits. Here are some of the key advantages:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Security</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> RBAC ensures that users only have access to the resources they need. This <strong>least-privilege</strong> principle reduces the risk of unauthorized access to sensitive data or critical resources.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Simplified Management</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Assigning permissions to roles instead of individual users simplifies the management of access rights. If a new user joins the organization, they can be quickly assigned to the appropriate role without having to manually configure permissions.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Scalability</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> As an organization grows, managing individual permissions becomes complex. RBAC allows for scalable management by grouping users into roles, making it easier to handle hundreds or thousands of users without compromising security.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Regulatory Compliance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Many industries require strict access controls to protect sensitive data (e.g., healthcare or finance). RBAC helps organizations enforce policies that align with regulatory requirements like HIPAA or GDPR.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Audit and Monitoring</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> RBAC makes it easier to track who has access to what resources. This can simplify audits and improve accountability in the organization.</li></ol><h3>Implementing RBAC in Your Application</h3><p>Implementing RBAC in a web application typically involves three key steps:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Defining Roles and Permissions</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Start by identifying the roles in your application and the permissions required for each role. For example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Admin</strong>: Can manage users, view and edit data, and configure settings.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager</strong>: Can view and edit data but cannot manage users.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>User</strong>: Can view data but cannot edit or delete it.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Assigning Roles to Users</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> After defining roles, you can assign users to these roles either manually or programmatically (during user registration, for example).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example in MongoDB (with Mongoose):</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const userSchema = new mongoose.Schema({</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  username: String,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  password: String,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  role: {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    type: String,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    enum: ['admin', 'manager', 'user'],</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    default: 'user'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const User = mongoose.model('User', userSchema);</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Enforcing Role-Based Permissions</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Once users are assigned roles, you’ll need to check their permissions before allowing access to specific resources or actions. This is typically done in middleware for backend applications.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example of an Express.js middleware for role validation:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">function checkRole(requiredRole) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (req, res, next) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (req.user.role !== requiredRole) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(403).json({ message: 'Access denied' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    next();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  };</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Example route</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">app.get('/admin-dashboard', checkRole('admin'), (req, res) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  res.send('Welcome to the Admin Dashboard');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>In this example, only users with the admin role can access the /admin-dashboard route.</li></ol><h3>Best Practices for Implementing RBAC</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Define Roles Clearly</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Avoid overcomplicating the system by defining too many roles. Stick to a clear, manageable set of roles based on the users’ responsibilities.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Use Role Inheritance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Use hierarchical RBAC for better scalability and to minimize redundancy. Allow roles to inherit permissions from other roles.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Regularly Review Access Control Policies</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> As your organization evolves, so should your RBAC policies. Regularly review roles, permissions, and user assignments to ensure access is always appropriate.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Implement the Principle of Least Privilege</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Always assign users the minimum level of access required to perform their tasks. Avoid giving users more permissions than they need.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Use Auditing and Logging</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Track who accessed what resources and when. This helps detect unauthorized access or potential security breaches.</li></ol><h3>Conclusion</h3><p>Role-Based Access Control (RBAC) is a powerful and scalable way to manage user permissions and protect sensitive resources in your application. By defining roles, assigning appropriate permissions, and enforcing access control policies, you can ensure a secure, manageable, and compliant system.</p><p>Whether you’re building a small app or a large enterprise solution, RBAC is a best practice that can save you time, effort, and resources while keeping your application secure and efficient. If you’re not already using RBAC, consider implementing it in your next project to improve both security and user experience.</p><p><br></p>\",\n            \"excerpt\": \"Ensuring that users have the correct permissions to access resources is crucial for both security and user experience. One of the most common ways to manage access control is Role-Based Access Control (RBAC)\",\n            \"tags\": [\n                \"RBAC\",\n                \"Access Control\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 4,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:49:26.565Z\",\n            \"updatedAt\": \"2025-10-03T22:12:49.798Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 9,\n            \"title\": \"Mastering Asynchronous JavaScript\",\n            \"slug\": \"mastering-asynchronous-javascript\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506307/y34ci4eqk6-1759506307231-1isk46uomkdqguxlprzjmcq-png.png.png\",\n            \"content\": \"<p>JavaScript is known for its asynchronous capabilities, allowing developers to create non-blocking, high-performance web applications. Asynchronous JavaScript is essential when dealing with I/O operations like data fetching, file reading, or timers, all of which could otherwise block the main thread and cause performance issues.</p><p>In this blog post, we’ll explore the basics of asynchronous JavaScript, different ways to handle asynchronous operations, and how to choose the right approach for your use case.</p><h3>What is Asynchronous JavaScript?</h3><p>Asynchronous JavaScript enables the execution of code without blocking the main thread of execution. Unlike synchronous code, which executes line by line and waits for each operation to complete before moving to the next, asynchronous code allows the browser to continue running other tasks (like user interactions) while waiting for long-running operations (such as network requests) to complete.</p><p>In JavaScript, asynchronous behavior is most commonly encountered in situations like:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Fetching data from a server (AJAX or fetch)</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Setting timeouts or intervals (setTimeout, setInterval)</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Event handling (like user clicks or keyboard events)</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Promises and async/await (modern tools for handling asynchronous code)</li></ol><h3>How Asynchronous JavaScript Works</h3><p>To better understand asynchronous behavior, let’s look at a simple example. Consider the following synchronous code:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('First');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('Second');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('Third');</div></div><p>This code will output:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">First</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Second</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Third</div></div><p>Now, let’s introduce an asynchronous operation with setTimeout:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('First');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setTimeout(() =&gt; console.log('Second'), 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('Third');</div></div><p>In this example:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>'First' is printed immediately.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The setTimeout function sets up an asynchronous operation (logging 'Second' after 1 second).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>'Third' is printed immediately after 'First', even before the timeout completes.</li></ol><p>The output will be:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">First</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Third</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Second</div></div><p>Here, 'Second' is logged last because setTimeout doesn’t block the main thread, allowing 'Third' to be logged before it.</p><h3>Common Ways to Handle Asynchronous Code</h3><p>JavaScript provides several ways to handle asynchronous code. Let’s go over the most commonly used techniques:</p><h4>1. <strong>Callbacks</strong></h4><p>Callbacks were the original way to handle asynchronous operations in JavaScript. A callback is a function that is passed as an argument to another function and executed when the asynchronous operation is completed.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">function fetchData(callback) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  setTimeout(() =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    callback('Data fetched');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }, 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData((message) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(message);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><p><strong>Pros</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Simple and effective for small-scale operations.</li></ol><p><strong>Cons</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Can lead to <strong>callback hell</strong> or <strong>pyramid of doom</strong> when dealing with multiple nested callbacks, making the code difficult to maintain.</li></ol><h4>2. <strong>Promises</strong></h4><p>Introduced in ES6, Promises provide a cleaner and more manageable way to handle asynchronous code. A Promise represents a value that may be available now, or in the future, or never.</p><p>Here’s how Promises work:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">let fetchData = new Promise((resolve, reject) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  setTimeout(() =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    resolve('Data fetched');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }, 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData.then((message) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(message);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}).catch((error) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.error(error);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>resolve</strong> is used when the asynchronous operation succeeds.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>reject</strong> is used when the asynchronous operation fails.</li></ol><p><strong>Pros</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>More readable and maintainable than callbacks.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Handles errors more effectively with .catch().</li></ol><p><strong>Cons</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Still requires chaining .then() and .catch() for handling results and errors, which can be less intuitive for complex workflows.</li></ol><h4>3. <strong>Async/Await</strong></h4><p>Introduced in ES8, async/await is a syntactic sugar over Promises, making asynchronous code look and behave more like synchronous code.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  let result = await new Promise((resolve) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    setTimeout(() =&gt; resolve('Data fetched'), 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(result);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData();</div></div><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>async</strong> marks a function as asynchronous, and it always returns a Promise.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>await</strong> pauses the execution of the function until the Promise is resolved or rejected.</li></ol><p><strong>Pros</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Cleaner, more readable code.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Makes asynchronous code feel synchronous, improving comprehension.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Handles errors using try/catch blocks, which are more intuitive.</li></ol><p><strong>Cons</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Can only be used inside async functions.</li></ol><h4>Example: Handling Multiple Async Operations</h4><p>Let’s say we need to fetch data from two different APIs. Using Promises and async/await can simplify this:</p><p><strong>With Promises</strong>:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">function fetchAPI(url) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return new Promise((resolve) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    setTimeout(() =&gt; resolve(`Data from ${url}`), 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchAPI('api1.com').then((data1) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return fetchAPI('api2.com');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}).then((data2) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data2);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><p><strong>With Async/Await</strong>:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  let data1 = await fetchAPI('api1.com');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  let data2 = await fetchAPI('api2.com');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data2);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData();</div></div><p>The async/await version is more readable, especially when handling multiple async operations.</p><h3>When to Use Each Approach?</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Callbacks</strong>: Use callbacks for simple, short-lived asynchronous tasks (e.g., basic event listeners or small timer-based functions).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Promises</strong>: Promises are great for handling single asynchronous operations or when you need to chain multiple async operations with .then() and .catch().</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Async/Await</strong>: This is the modern and preferred way for managing asynchronous code. It’s especially useful for handling multiple async operations in sequence and for better error handling with try/catch.</li></ol><h3>Conclusion</h3><p>Asynchronous JavaScript is a powerful tool that enables non-blocking operations, making your web applications faster and more efficient. With the evolution of JavaScript, we now have better ways to handle async tasks, from callbacks to Promises, and now async/await, which offers a clean and readable approach to asynchronous code.</p><p>Understanding how and when to use each of these methods will help you write more efficient, maintainable, and error-free code. Asynchronous programming is essential for handling operations like data fetching, timers, and user events, and with the modern syntax, it’s easier than ever to master.</p><p><br></p>\",\n            \"excerpt\": \"JavaScript is known for its asynchronous capabilities, allowing developers to create non-blocking, high-performance web applications. Asynchronous JavaScript is essential when dealing with I/O operations like data fetching, file reading, or timers\",\n            \"tags\": [\n                \"JavaScript\",\n                \"Asynchronous JavaScript\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 2,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:45:08.094Z\",\n            \"updatedAt\": \"2025-10-03T15:45:25.211Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 8,\n            \"title\": \"What's New in React 19\",\n            \"slug\": \"what's-new-in-react-19\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506127/g36ihglqgyb-1759506127777-images-jpeg.jpeg.jpg\",\n            \"content\": \"<p>React has been evolving rapidly, and every new release brings exciting features and improvements that help developers create better, faster, and more scalable applications. With React 19, the community is buzzing about a host of new features and optimizations. In this blog, we’ll dive into the most notable updates in React 19 and what they mean for your development process.</p><h3>1. <strong>Concurrent Mode Becomes Stable</strong></h3><p>One of the biggest changes in React 19 is the stabilization of Concurrent Mode. This feature was first introduced in experimental versions of React and allows React to work on multiple tasks at the same time, rather than blocking the main thread while rendering components. With Concurrent Mode, React can prioritize updates and ensure that the user experience remains smooth and responsive, even when dealing with large datasets or complex UI changes.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Responsiveness</strong>: React can pause rendering to handle high-priority updates (like animations or user inputs) before continuing with less critical tasks.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>: By breaking rendering tasks into smaller chunks, the browser thread isn’t blocked, resulting in faster load times and smoother interactions.</li></ol><p>With React 19, Concurrent Mode is no longer experimental and can be used by default, providing better performance and responsiveness for production applications.</p><h3>2. <strong>Automatic Batching of Updates</strong></h3><p>React 19 introduces <strong>automatic batching</strong>, a feature that allows React to group multiple state updates into a single render cycle, improving performance and reducing unnecessary re-renders.</p><p>Previously, React would re-render a component every time a state update occurred. With automatic batching, React now collects all state updates in an event or lifecycle, and only re-renders the component once after all updates are processed. This significantly reduces the number of renders and improves the overall performance of React applications.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Performance Boost</strong>: Reduces the number of renders, especially in complex applications.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Cleaner Code</strong>: No need to manually batch state updates.</li></ol><p>Example:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Before automatic batching</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState1(newState1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState2(newState2);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// With automatic batching in React 19, only one re-render will occur after both updates.</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState1(newState1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState2(newState2);</div></div><h3>3. <strong>React Server Components Enhancements</strong></h3><p>React Server Components (RSC) were first introduced to allow developers to render parts of their app on the server, reducing the JavaScript bundle size sent to the client. In React 19, RSCs have seen major enhancements to improve both functionality and performance.</p><p>One of the key improvements is <strong>streaming</strong>: React can now stream components as they are being rendered on the server, sending them to the client in smaller chunks rather than waiting for the entire component tree to render. This allows for faster loading times and a better user experience.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smaller Client Bundles</strong>: Server-rendered components are sent as static HTML, meaning less JavaScript is required on the client-side.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Loading</strong>: React can stream data from the server to the client, improving load times and reducing time-to-interactive.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better SEO</strong>: Since the content is server-rendered, search engines can easily crawl the content, improving SEO performance.</li></ol><h3>4. <strong>Improved Error Boundaries</strong></h3><p>Error boundaries have been a staple of React for handling JavaScript errors in the component tree. However, React 19 introduces an improved version of error boundaries, making it easier to catch and handle errors at the component level.</p><p>The new error boundary model allows for better error handling and supports displaying fallback UI while keeping the app running smoothly even in the case of an error.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better User Experience</strong>: The improved error boundaries provide a smoother user experience by displaying fallback UI when an error occurs.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>More Granular Control</strong>: You can now have more granular control over where errors are caught in the component tree.</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Example of a new error boundary in React 19</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">class ErrorBoundary extends React.Component {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  componentDidCatch(error, info) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    // Log error to an error tracking service</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  render() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (this.state.hasError) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    return this.props.children;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>5. <strong>New JSX Transform</strong></h3><p>React 19 comes with an updated JSX transform. This update allows React to work more efficiently with JSX syntax, eliminating the need for React.createElement calls. The JSX transform is now more optimized and supports improved tree shaking, which helps in reducing the final bundle size.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Development</strong>: With the new JSX transform, you no longer need to import React in every component that uses JSX.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smaller Bundles</strong>: Tree shaking removes unused code, reducing the size of your final JavaScript bundle.</li></ol><h3>6. <strong>Improved Suspense for Data Fetching</strong></h3><p>While Suspense was initially designed for code-splitting, React 19 improves the Suspense API for data fetching. The new updates make it easier to handle loading states and manage asynchronous rendering.</p><p>Now, you can suspend data-fetching components more easily and gracefully handle loading indicators. This makes React a more efficient tool for building apps with dynamic data, such as real-time apps or apps with complex data dependencies.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smoother User Experience</strong>: Users will experience fewer loading flickers as data is fetched and displayed asynchronously.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Support for Concurrent Rendering</strong>: Suspense works well with Concurrent Mode, ensuring that data fetching doesn’t block rendering.</li></ol><h3>7. <strong>Concurrent Rendering for Layout Effects</strong></h3><p>React 19 also introduces <strong>concurrent rendering for layout effects</strong>. Previously, layout effects were run synchronously, blocking the UI thread and potentially causing delays. With the new update, layout effects can now be executed concurrently, which means they don’t block the rendering process and the UI can remain responsive.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smoother Animations</strong>: Layout effects will no longer block the main thread, leading to smoother animations and transitions.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved UI Responsiveness</strong>: React can handle layout updates concurrently, reducing delays during complex UI updates.</li></ol><h3>Conclusion</h3><p>React 19 brings a host of exciting features and improvements that will make your development process faster, more efficient, and more powerful. From the stable release of Concurrent Mode to enhanced Server Components, automatic batching, and better error handling, React 19 is packed with features that make it a solid choice for building modern web applications.</p><p>By adopting these new features, you’ll not only improve your app’s performance but also deliver a better user experience. If you haven’t already, consider upgrading to React 19 and start exploring the improvements today.</p><p><br></p>\",\n            \"excerpt\": \"React has been evolving rapidly, and every new release brings exciting features and improvements that help developers create better, faster, and more scalable applications. With React 19, the community is buzzing about a host of new features and optimizations.\",\n            \"tags\": [\n                \"React\",\n                \"Server Component\",\n                \"Concurrent Redering\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 0,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:42:08.288Z\",\n            \"updatedAt\": \"2025-10-03T15:42:08.288Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 7,\n            \"title\": \"A Beginner’s Guide to Next.js API Routes\",\n            \"slug\": \"a-beginner's-guide-to-next.js-api-routes\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759505789/lv2aof2i3vm-1759505789849-z13cpbqstj98ina-complete-guide-to-next-js-a-react-js-framework-avif.avif.avif\",\n            \"content\": \"<p>Next.js is a popular React framework that not only simplifies front-end development but also provides an easy way to create backend API routes within the same project. One of the key features in Next.js is the ability to define API routes. These allow you to build server-side functionality without needing a separate backend server.</p><p>In this blog post, we’ll explore what Next.js API routes are, how they work, and how you can use them to build a full-stack application with ease.</p><h3>What Are Next.js API Routes?</h3><p>API routes in Next.js are a simple and powerful way to build backend endpoints within your application. They allow you to handle HTTP requests (like GET, POST, PUT, DELETE) directly in your Next.js project, using the same project structure you use for your front-end code. This eliminates the need for a separate backend server, which simplifies development.</p><p>Each API route is a file inside the pages/api directory, where the file name corresponds to the route.</p><p>For example, if you create a file pages/api/hello.js, it would correspond to the API endpoint /api/hello.</p><h3>How Do API Routes Work in Next.js?</h3><p>API routes in Next.js work by exporting a handler function inside the file. This handler function accepts two arguments: req (request) and res (response). You can then use these objects to handle the incoming HTTP request, process any logic (like database queries), and send back a response.</p><p>Here’s an example of a simple API route:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/hello.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  res.status(200).json({ message: \\\"Hello, World!\\\" });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>In this example:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>req represents the HTTP request object, which contains information about the incoming request (like method, body, headers, etc.).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>res is the response object, which allows you to send a response back to the client.</li></ol><h3>Types of API Routes</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>GET Request</strong>: You can handle GET requests to fetch data. For example, fetching data from a database or returning static data.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>POST Request</strong>: Handle POST requests to receive data from the client, like form submissions or data created by the user.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>PUT/PATCH Request</strong>: Handle updates to data, typically used in CRUD operations.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>DELETE Request</strong>: Handle deleting data from the server.</li></ol><h3>Example 1: Handling a GET Request</h3><p>Let’s create an API route that responds with a list of items when a GET request is made.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/items.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (req.method === 'GET') {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const items = ['Item 1', 'Item 2', 'Item 3'];</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(200).json(items);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(405).json({ message: 'Method Not Allowed' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>When you visit /api/items, you’ll get a response like this:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">[\\\"Item 1\\\", \\\"Item 2\\\", \\\"Item 3\\\"]</div></div><h3>Example 2: Handling a POST Request</h3><p>Now, let’s handle a POST request where we simulate adding an item to a list.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/addItem.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">let items = ['Item 1', 'Item 2', 'Item 3'];</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (req.method === 'POST') {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const { newItem } = req.body;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (!newItem) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(400).json({ message: 'Item name is required' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    items.push(newItem);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(201).json({ message: 'Item added', items });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(405).json({ message: 'Method Not Allowed' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>To test this, you can make a POST request to /api/addItem with a JSON body like this:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">{</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  \\\"newItem\\\": \\\"Item 4\\\"</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>Response:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">{</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  \\\"message\\\": \\\"Item added\\\",</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  \\\"items\\\": [\\\"Item 1\\\", \\\"Item 2\\\", \\\"Item 3\\\", \\\"Item 4\\\"]</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>Handling Dynamic API Routes</h3><p>Next.js also supports dynamic API routes. You can create API routes with dynamic parameters by using the [param] syntax.</p><p>Example: A dynamic API route that fetches an item by its ID.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/item/[id].js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    query: { id },</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    method,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } = req;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (method === 'GET') {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const items = ['Item 1', 'Item 2', 'Item 3'];</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const item = items.find((i) =&gt; i === `Item ${id}`);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (item) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(200).json({ item });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(404).json({ message: 'Item not found' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(405).json({ message: 'Method Not Allowed' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>Now you can access the route /api/item/1, /api/item/2, etc., and get the corresponding item.</p><h3>Benefits of Next.js API Routes</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Simplified Full-Stack Development</strong>: You can build both the front-end and back-end within the same Next.js application, reducing complexity and improving the development workflow.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Serverless Ready</strong>: Next.js API routes can be easily deployed on serverless platforms like Vercel. Each API route is treated as a serverless function, making it simple to scale without worrying about server management.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Built-In Routing</strong>: Next.js automatically maps the file structure in the pages/api directory to API routes, so you don’t need to worry about manually setting up routes.</li></ol><h3>Conclusion</h3><p>Next.js API routes offer a simple and effective way to build server-side functionality within your Next.js project. Whether you're building a REST API, handling form submissions, or performing CRUD operations, API routes let you add backend logic seamlessly.</p><p>With Next.js, you can create a full-stack application with minimal setup. The best part? You don't need a separate backend server, making it easier to maintain and deploy your application. Try out Next.js API routes in your next project and see how they can improve your development workflow.</p>\",\n            \"excerpt\": \"Next.js is a popular React framework that not only simplifies front-end development but also provides an easy way to create backend API routes within the same project. One of the key features in Next.js is the ability to define API routes.\",\n            \"tags\": [\n                \"Nextjs\",\n                \"API Route\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 0,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:36:30.459Z\",\n            \"updatedAt\": \"2025-10-03T15:36:30.459Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 6,\n            \"title\": \"Getting Started with Next.js App Router\",\n            \"slug\": \"getting-started-with-next.js-app-router\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759505654/k4yf5bgegrg-1759505654179-0dkhu49vrbisswknbhar1920x1357-webp.webp.webp\",\n            \"content\": \"<p>Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.</p><p>In this post, we’ll give you a brief overview of the App Router, its benefits, and how to get started using it.</p><h3>What is the App Router in Next.js?</h3><p>The App Router is a new routing system introduced in Next.js 13, built to work seamlessly with React’s Server Components. It provides a file-based routing structure that makes it easier to manage both server-side and client-side rendering. This replaces the traditional pages directory with the more powerful app directory, offering a more modular, nested, and dynamic routing approach.</p><h3>Key Features of the App Router</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File-based Routing</strong>: Just like with the old pages directory, the App Router uses a file-based system, but with more flexibility and options for server-side rendering (SSR) and static site generation (SSG).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Layouts &amp; Nested Routing</strong>: You can create layouts that persist across routes, allowing for more complex UI structures with nested routes. This is useful for building things like dashboards, where certain parts of the UI (like sidebars or headers) stay the same, and only the main content changes.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server Components</strong>: With the App Router, Next.js fully integrates React Server Components, allowing you to render parts of the UI on the server, reducing client-side JavaScript and improving performance.</li></ol><h3>How to Use the App Router</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Create the App Directory</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> If you're starting a new Next.js project with version 13+, you'll notice that the app directory replaces pages. Inside app, each directory corresponds to a route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example structure:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">/app</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  /about</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  /dashboard</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    layout.js</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Defining Routes</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Just like with the pages directory, create a page.js or page.tsx file for each route you want to define. For example, creating an about/page.js will automatically create the /about route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Using Layouts</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Layouts are defined in files named layout.js or layout.tsx inside route directories. These are used to wrap child routes.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/dashboard/layout.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function DashboardLayout({ children }) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;header&gt;Dashboard Header&lt;/header&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;aside&gt;Sidebar&lt;/aside&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;main&gt;{children}&lt;/main&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;/div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  );</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Async Rendering with Server Components</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> You can define a component as a server component by exporting it from a .js file. This allows React to fetch data on the server and send only the minimal required HTML to the client.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/dashboard/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default async function DashboardPage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const data = await fetchData();  // Fetch data server-side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Dynamic Routing</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> You can create dynamic routes using the [param] syntax, similar to the old pages routing system. For instance, creating a [id]/page.js will create a dynamic route based on the id parameter.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/post/[id]/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function PostPage({ params }) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const { id } = params;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;Post ID: {id}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>Benefits of the App Router</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>: By using server-side rendering and React Server Components, Next.js can optimize what gets sent to the client, reducing JavaScript bundle sizes and improving page load times.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Flexible Layouts</strong>: Nested routing and layouts allow for more complex UI structures without repeating code.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Developer Experience</strong>: With a more modular and flexible routing system, developers can manage routes and layouts more efficiently, leading to faster development times.</li></ol><h3>Conclusion</h3><p>Next.js’ App Router brings a new level of flexibility and power to routing in React applications. Whether you're building static pages, server-rendered routes, or complex dynamic UIs, the App Router allows you to handle it all with ease. It simplifies how we organize and manage components, making it a great tool for building scalable, high-performance web applications.</p><p>If you’re new to Next.js, switching to the App Router can greatly enhance your development experience and application performance. Try it out in your next project!</p><p><br></p>\",\n            \"excerpt\": \"Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.\",\n            \"tags\": [\n                \"Nextjs\",\n                \"APP Router\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 0,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:34:14.962Z\",\n            \"updatedAt\": \"2025-10-03T15:34:14.962Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Understanding React Suspense\",\n            \"slug\": \"understanding-react-suspense\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759422166/lhr6c5ysfb9-1759422165862-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"content\": \"<p>React Suspense is one of the most exciting and powerful features introduced in React 16.6. It helps developers build faster, more dynamic web applications by handling asynchronous data fetching in a more declarative manner. In this post, we will dive deep into what React Suspense is, how it works, and how you can use it to improve the user experience in your React applications.</p><h3>What is React Suspense?</h3><p>React Suspense is a feature that allows developers to \\\"suspend\\\" the rendering of a component tree while waiting for some asynchronous operation (like data fetching, code-splitting, or image loading) to complete. It helps to manage loading states and delays in a cleaner, more user-friendly way.</p><p>Instead of showing loading indicators or placeholders manually for each piece of data, Suspense allows you to specify a loading boundary for components that depend on asynchronous data, and React takes care of the rest.</p><h3>Why Suspense?</h3><p>Traditionally, asynchronous operations in React have been managed using state (e.g., isLoading or hasError), which requires explicit handling of loading states. React Suspense abstracts this process, allowing you to declaratively handle such states, making your code cleaner, more readable, and maintainable.</p><h3>How Does React Suspense Work?</h3><p>React Suspense works by wrapping components that depend on asynchronous data in a Suspense component. The Suspense component allows you to define a fallback UI (usually a loading spinner or placeholder) that will be displayed until the wrapped component's data is ready.</p><h4>Basic Example:</h4><p>Let’s look at a simple example to see how Suspense works in practice.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">import React, { Suspense } from \\\"react\\\";</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Simulate an asynchronous data fetching function</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const fetchData = new Promise((resolve) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  setTimeout(() =&gt; resolve(\\\"Data loaded!\\\"), 2000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// A component that depends on fetching data</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const MyComponent = () =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const [data, setData] = React.useState(null);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  React.useEffect(() =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    fetchData.then((result) =&gt; setData(result));</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }, []);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (!data) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    throw fetchData; // Suspense will handle this promise</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">};</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const App = () =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">        &lt;MyComponent /&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;/Suspense&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;/div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  );</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">};</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default App;</div></div><p>In this example:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>MyComponent fetches data asynchronously.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Suspense wraps MyComponent and provides a fallback UI (&lt;div&gt;Loading...&lt;/div&gt;).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Until the data is fetched, React will suspend the rendering of MyComponent and show the fallback UI.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Once the data is ready, React re-renders the component with the fetched data.</li></ol><h3>Key Concepts of React Suspense</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Suspense Boundary</strong>: The &lt;Suspense&gt; component acts as a boundary where asynchronous operations can be \\\"suspended\\\". You can have multiple Suspense boundaries in your app, each with its own fallback UI.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Fallback UI</strong>: This is the UI that appears while waiting for the data to load. You can display loading spinners, skeleton screens, or any custom component to enhance the user experience during loading states.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Lazy Loading</strong>: React Suspense works hand-in-hand with React.lazy(), which allows you to split your code into smaller chunks and load them only when they are needed. This reduces the initial bundle size, improving the performance of your app.</li></ol><p><br></p>\",\n            \"excerpt\": \"React Suspense is a feature that allows developers to \\\"suspend\\\" the rendering of a component tree while waiting for some asynchronous operation (like data fetching, code-splitting, or image loading) to complete. \",\n            \"tags\": [\n                \"React\",\n                \"React Suspense\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 45,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-02T01:00:07.172Z\",\n            \"updatedAt\": \"2025-10-02T16:49:17.680Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get Single Blog with slug",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTkzNzQ0NTYsImV4cCI6MTc1OTYzMzY1Nn0.AkeM0vY0v_US5ciWxszF9BVw07f4wx38YKqAnzsBLuQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog/simplifying-server-actions-in-modern-web-development",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog",
										"simplifying-server-actions-in-modern-web-development"
									]
								}
							},
							"response": [
								{
									"name": "Get Single Blog with slug",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTkzNzQ0NTYsImV4cCI6MTc1OTYzMzY1Nn0.AkeM0vY0v_US5ciWxszF9BVw07f4wx38YKqAnzsBLuQ",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog/simplifying-server-actions-in-modern-web-development",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog",
												"simplifying-server-actions-in-modern-web-development"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "15344"
										},
										{
											"key": "ETag",
											"value": "W/\"3bf0-1sC3j48RBJ0JY9+enPSsT+58R1s\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:29:55 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Blog retrieved successfully\",\n    \"data\": {\n        \"id\": 11,\n        \"title\": \"Simplifying Server Actions in Modern Web Development\",\n        \"slug\": \"simplifying-server-actions-in-modern-web-development\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506765/64aqiaqq3l7-1759506765096-15cpbnzqnvaz-jzmktfguja-png.png.png\",\n        \"content\": \"<p>In modern web development, handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end, enabling developers to write server-side code directly within their components or routes.</p><p>In this blog post, we’ll dive into what server actions are, how they work, their benefits, and how you can integrate them into your web applications.</p><h3>What Are Server Actions?</h3><p><strong>Server actions</strong> are a way of executing server-side code directly from the client side, often integrated into frameworks like Next.js. Instead of creating separate API routes for every server-side operation, server actions allow developers to define server-side logic within their React components or other parts of the application.</p><p>This approach brings the power of server-side functionality (like database queries, authentication checks, and data manipulation) to client-side components without needing to manage separate API endpoints. Server actions can simplify how developers handle common tasks like data fetching, authentication, and form submissions.</p><h3>How Do Server Actions Work?</h3><p>Typically, server actions allow you to write server-side logic within specific React components or routes, and the server takes care of executing this code when triggered by the client. When a request is made, the server action handles the logic and returns a response to the client.</p><p>For example, in <strong>Next.js</strong>, server actions work seamlessly with API routes and React components. These actions are executed server-side but can be called directly from your front-end code. This reduces the need to create separate APIs and allows for a more integrated approach to server-client communication.</p><p>Here’s a simplified example in Next.js:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// In your React component</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// This will run on the server side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromDatabase();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function Page() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchData();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>In this example:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The fetchData function is executed on the server, fetching data from a database or API.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The async function allows for the handling of asynchronous code like database queries or API calls.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The response is sent back to the component, and the user can interact with it in the UI.</li></ol><h3>Benefits of Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Reduced Complexity</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> One of the biggest advantages of server actions is that they allow you to move server-side logic directly into your React components. This eliminates the need to create separate API endpoints or manage a server-side framework for each task, making your codebase simpler and more maintainable.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Development</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Since server actions remove the need for explicit API routes, you can quickly implement server-side functionality and avoid the extra boilerplate of creating RESTful or GraphQL endpoints. This can speed up your development process significantly.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Data Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions allow for direct interaction with server-side resources, like databases or external APIs, without the overhead of multiple HTTP requests. This can result in more efficient data fetching, especially for tasks that involve complex server-side processing or logic.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> By executing server-side logic directly, you reduce the number of HTTP requests between the client and server. This can lead to improved performance, as the server can respond directly with the required data, avoiding unnecessary round trips.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server-Side Rendering (SSR) Integration</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> In frameworks like Next.js, server actions fit naturally with Server-Side Rendering (SSR) workflows. Server actions can be invoked during SSR, allowing for faster page loads and better SEO.</li></ol><h3>Use Cases for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Data Fetching</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are perfect for fetching data that requires complex processing or access to private resources like databases or third-party services.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function getUserData(userId) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const userData = await fetchUserDataFromDB(userId);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return userData;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Authentication and Authorization</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can simplify authentication logic. You can handle authentication and authorization checks directly in the component, which would traditionally require a separate API route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function loginUser(credentials) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const user = await authenticate(credentials);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">if (!user) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">throw new Error('Invalid credentials');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return user;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Form Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions make form submission and processing much easier by eliminating the need for an additional API endpoint. You can directly handle form submissions on the server.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function submitForm(data) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const response = await submitFormDataToDatabase(data);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return response;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File Uploads</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can also handle file uploads, as they allow you to directly interact with server-side logic to manage files, store them in cloud storage, or process them as needed.</li></ol><h3>Implementing Server Actions in Next.js</h3><p>In <strong>Next.js 13+</strong>, server actions have been tightly integrated with the app router and are built to be easy to use. Here’s an example of how to implement a server action in Next.js:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Define a Server Action</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/actions.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export async function fetchDataFromServer() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromAPI();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Call Server Action in the Component</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">import { fetchDataFromServer } from './actions';</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function HomePage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchDataFromServer();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>This example showcases how to define a server action (fetchDataFromServer) in a separate file and then call it from your component. It’s a simple and clean way to keep your code organized while executing server-side logic.</p><h3>Best Practices for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Separation of Concerns</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Although server actions simplify the workflow, it’s still important to keep business logic separate from UI logic. Maintain clarity by placing complex server-side operations in dedicated functions or service files.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Error Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Always implement proper error handling in server actions. Since server actions are asynchronous, ensure that errors are caught and handled gracefully to avoid crashes or unexpected behavior.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Avoid Overuse</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are great for tasks that require server-side logic, but they might not always be the best solution for tasks like static data fetching. Use them judiciously to avoid cluttering your components with too much server-side code.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Security</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> When implementing server actions, always keep security in mind. Ensure that sensitive data is properly protected, and avoid exposing private resources unnecessarily.</li></ol><h3>Conclusion</h3><p>Server actions are a game-changer for modern web development, simplifying how we handle server-side logic and improving the overall performance and maintainability of applications. By enabling direct interaction with the server from within your components, server actions eliminate the need for complex API routes and reduce boilerplate code.</p><p>If you're working with frameworks like Next.js, incorporating server actions into your workflow can significantly enhance your development experience and allow for more efficient, scalable applications. Whether you're handling data fetching, form submissions, or authentication, server actions provide a clean, integrated solution for many common tasks.</p><p>Embrace server actions in your next project and simplify how you handle server-side logic.</p><p><br></p><p><br></p>\",\n        \"excerpt\": \"Handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end\",\n        \"tags\": [],\n        \"isFeatured\": false,\n        \"isPublished\": true,\n        \"views\": 56,\n        \"authorId\": 2,\n        \"createdAt\": \"2025-10-03T15:52:45.945Z\",\n        \"updatedAt\": \"2025-10-05T04:04:54.149Z\"\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Create Blog",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"value": "{\n\"title\": \"Getting Started with Next.js App Router\",\n\"content\": \"TEST CONTENT\",\n\"excerpt\": \"Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.\",\n\"tags\": [\n\"Nextjs\",\n\"APP Router\"\n],\n\"isFeatured\": true,\n\"isPublished\": true,\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/Users/faisal/Downloads/mildlee-8N6z4yXUkwY-unsplash.jpg"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog",
										"create"
									]
								}
							},
							"response": [
								{
									"name": "Create Blog",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "data",
													"value": "{\n\"title\": \"Test Blog\",\n\"content\": \"TEST CONTENT\",\n\"excerpt\": \"Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.\",\n\"tags\": [\n\"Nextjs\",\n\"APP Router\"\n],\n\"isFeatured\": true,\n\"isPublished\": true\n}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "/Users/faisal/Downloads/b5a7-images/ab0d45a55f0c41a243093fb57d460fc366fed9ab-6336x3952.png"
												}
											]
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog/create",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog",
												"create"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "721"
										},
										{
											"key": "ETag",
											"value": "W/\"2d1-gztbVyos1KH+ZhEzcvqHYKK+55U\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:40:37 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 201,\n    \"success\": true,\n    \"message\": \"Blog created successfully\",\n    \"data\": {\n        \"id\": 16,\n        \"title\": \"Test Blog\",\n        \"slug\": \"test-blog\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759646436/z7gjuybxf3-1759646436118-ab0d45a55f0c41a243093fb57d460fc366fed9ab-6336x3952-png.png.png\",\n        \"content\": \"TEST CONTENT\",\n        \"excerpt\": \"Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.\",\n        \"tags\": [\n            \"Nextjs\",\n            \"APP Router\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"views\": 0,\n        \"authorId\": 2,\n        \"createdAt\": \"2025-10-05T06:40:37.050Z\",\n        \"updatedAt\": \"2025-10-05T06:40:37.050Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get All Blog",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "hello",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "id",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "isFeatured",
											"value": "false",
											"disabled": true
										},
										{
											"key": "techStack",
											"value": "Next",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Get All Blog",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog"
											],
											"query": [
												{
													"key": "searchTerm",
													"value": "hello",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "isFeatured",
													"value": "false",
													"disabled": true
												},
												{
													"key": "techStack",
													"value": "Next",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "84459"
										},
										{
											"key": "ETag",
											"value": "W/\"149eb-piyyDcoSa4F+OzCqlxMH2CaYZcI\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:29:06 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Blogs retrieved successfully\",\n    \"meta\": {\n        \"total\": 8,\n        \"page\": 1,\n        \"limit\": 50\n    },\n    \"data\": [\n        {\n            \"id\": 13,\n            \"title\": \"Eaque vero reprehendtr4t\",\n            \"slug\": \"eaque-vero-reprehendtr4t\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759538050/klgbd7llexp-1759538049966-0dkhu49vrbisswknbhar1920x1357-webp.webp.webp\",\n            \"content\": \"<p>Et et repudiandae li.</p>\",\n            \"excerpt\": \"Dolore deleniti debi\",\n            \"tags\": [\n                \"Omnis totam ut excep\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 10,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-04T00:34:10.670Z\",\n            \"updatedAt\": \"2025-10-05T04:21:22.847Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 11,\n            \"title\": \"Simplifying Server Actions in Modern Web Development\",\n            \"slug\": \"simplifying-server-actions-in-modern-web-development\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506765/64aqiaqq3l7-1759506765096-15cpbnzqnvaz-jzmktfguja-png.png.png\",\n            \"content\": \"<p>In modern web development, handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end, enabling developers to write server-side code directly within their components or routes.</p><p>In this blog post, we’ll dive into what server actions are, how they work, their benefits, and how you can integrate them into your web applications.</p><h3>What Are Server Actions?</h3><p><strong>Server actions</strong> are a way of executing server-side code directly from the client side, often integrated into frameworks like Next.js. Instead of creating separate API routes for every server-side operation, server actions allow developers to define server-side logic within their React components or other parts of the application.</p><p>This approach brings the power of server-side functionality (like database queries, authentication checks, and data manipulation) to client-side components without needing to manage separate API endpoints. Server actions can simplify how developers handle common tasks like data fetching, authentication, and form submissions.</p><h3>How Do Server Actions Work?</h3><p>Typically, server actions allow you to write server-side logic within specific React components or routes, and the server takes care of executing this code when triggered by the client. When a request is made, the server action handles the logic and returns a response to the client.</p><p>For example, in <strong>Next.js</strong>, server actions work seamlessly with API routes and React components. These actions are executed server-side but can be called directly from your front-end code. This reduces the need to create separate APIs and allows for a more integrated approach to server-client communication.</p><p>Here’s a simplified example in Next.js:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// In your React component</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// This will run on the server side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromDatabase();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function Page() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchData();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>In this example:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The fetchData function is executed on the server, fetching data from a database or API.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The async function allows for the handling of asynchronous code like database queries or API calls.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The response is sent back to the component, and the user can interact with it in the UI.</li></ol><h3>Benefits of Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Reduced Complexity</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> One of the biggest advantages of server actions is that they allow you to move server-side logic directly into your React components. This eliminates the need to create separate API endpoints or manage a server-side framework for each task, making your codebase simpler and more maintainable.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Development</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Since server actions remove the need for explicit API routes, you can quickly implement server-side functionality and avoid the extra boilerplate of creating RESTful or GraphQL endpoints. This can speed up your development process significantly.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Data Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions allow for direct interaction with server-side resources, like databases or external APIs, without the overhead of multiple HTTP requests. This can result in more efficient data fetching, especially for tasks that involve complex server-side processing or logic.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> By executing server-side logic directly, you reduce the number of HTTP requests between the client and server. This can lead to improved performance, as the server can respond directly with the required data, avoiding unnecessary round trips.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server-Side Rendering (SSR) Integration</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> In frameworks like Next.js, server actions fit naturally with Server-Side Rendering (SSR) workflows. Server actions can be invoked during SSR, allowing for faster page loads and better SEO.</li></ol><h3>Use Cases for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Data Fetching</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are perfect for fetching data that requires complex processing or access to private resources like databases or third-party services.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function getUserData(userId) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const userData = await fetchUserDataFromDB(userId);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return userData;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Authentication and Authorization</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can simplify authentication logic. You can handle authentication and authorization checks directly in the component, which would traditionally require a separate API route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function loginUser(credentials) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const user = await authenticate(credentials);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">if (!user) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">throw new Error('Invalid credentials');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return user;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Form Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions make form submission and processing much easier by eliminating the need for an additional API endpoint. You can directly handle form submissions on the server.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function submitForm(data) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const response = await submitFormDataToDatabase(data);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return response;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File Uploads</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can also handle file uploads, as they allow you to directly interact with server-side logic to manage files, store them in cloud storage, or process them as needed.</li></ol><h3>Implementing Server Actions in Next.js</h3><p>In <strong>Next.js 13+</strong>, server actions have been tightly integrated with the app router and are built to be easy to use. Here’s an example of how to implement a server action in Next.js:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Define a Server Action</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/actions.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export async function fetchDataFromServer() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromAPI();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Call Server Action in the Component</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">import { fetchDataFromServer } from './actions';</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function HomePage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchDataFromServer();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>This example showcases how to define a server action (fetchDataFromServer) in a separate file and then call it from your component. It’s a simple and clean way to keep your code organized while executing server-side logic.</p><h3>Best Practices for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Separation of Concerns</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Although server actions simplify the workflow, it’s still important to keep business logic separate from UI logic. Maintain clarity by placing complex server-side operations in dedicated functions or service files.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Error Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Always implement proper error handling in server actions. Since server actions are asynchronous, ensure that errors are caught and handled gracefully to avoid crashes or unexpected behavior.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Avoid Overuse</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are great for tasks that require server-side logic, but they might not always be the best solution for tasks like static data fetching. Use them judiciously to avoid cluttering your components with too much server-side code.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Security</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> When implementing server actions, always keep security in mind. Ensure that sensitive data is properly protected, and avoid exposing private resources unnecessarily.</li></ol><h3>Conclusion</h3><p>Server actions are a game-changer for modern web development, simplifying how we handle server-side logic and improving the overall performance and maintainability of applications. By enabling direct interaction with the server from within your components, server actions eliminate the need for complex API routes and reduce boilerplate code.</p><p>If you're working with frameworks like Next.js, incorporating server actions into your workflow can significantly enhance your development experience and allow for more efficient, scalable applications. Whether you're handling data fetching, form submissions, or authentication, server actions provide a clean, integrated solution for many common tasks.</p><p>Embrace server actions in your next project and simplify how you handle server-side logic.</p><p><br></p><p><br></p>\",\n            \"excerpt\": \"Handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end\",\n            \"tags\": [],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 56,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:52:45.945Z\",\n            \"updatedAt\": \"2025-10-05T04:04:54.149Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 10,\n            \"title\": \"Understanding Role-Based Access Control (RBAC)\",\n            \"slug\": \"understanding-role-based-access-control-(rbac)\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506566/f14idct2sbt-1759506565900-ab0d45a55f0c41a243093fb57d460fc366fed9ab-6336x3952-png.png.png\",\n            \"content\": \"<p>In the world of software development, ensuring that users have the correct permissions to access resources is crucial for both security and user experience. One of the most common ways to manage access control is <strong>Role-Based Access Control (RBAC)</strong>. RBAC helps define and enforce policies that govern what actions a user can perform based on their role in the system.</p><p>In this blog post, we’ll explore what RBAC is, how it works, its benefits, and how you can implement it in your application.</p><h3>What is Role-Based Access Control (RBAC)?</h3><p>Role-Based Access Control (RBAC) is a method of restricting access to resources based on the roles assigned to users. Rather than assigning permissions to individual users, roles are defined and users are assigned to these roles. Each role has a set of permissions, which determine what actions a user in that role can perform.</p><p>In simple terms, RBAC allows you to manage <strong>who</strong> can access what resources and <strong>what</strong> they can do with those resources based on their role.</p><h4>Key Components of RBAC:</h4><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Users</strong>: The individuals who interact with the system (e.g., employees, administrators, or customers).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Roles</strong>: Predefined categories that group users based on their job functions or responsibilities (e.g., admin, manager, user).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Permissions</strong>: The allowed actions that a role can perform on a resource (e.g., read, write, delete).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Resources</strong>: The objects or data within the system that require protection (e.g., files, database entries, or APIs).</li></ol><h3>How RBAC Works</h3><p>RBAC assigns roles to users and then grants those roles specific permissions. Permissions dictate what actions can be performed on a resource, such as viewing, creating, updating, or deleting data.</p><p>For example, consider a content management system (CMS):</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Admins</strong>: Can create, update, delete, and view content.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Editors</strong>: Can create, update, and view content, but cannot delete content.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Viewers</strong>: Can only view content.</li></ol><p>In this case:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The <strong>admin</strong> role has the highest permissions.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The <strong>editor</strong> role has fewer permissions, and the <strong>viewer</strong> role has the least.</li></ol><h3>Types of RBAC Models</h3><p>RBAC can be implemented in several ways, depending on the complexity and the needs of the application:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Basic RBAC (User-Role-Permission)</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> In this model, users are assigned one or more roles, and roles are granted a set of permissions. It’s the most common model used in many applications.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>User: <strong>Alice</strong></li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Role: <strong>Admin</strong></li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Permissions: <strong>Create, Update, Delete, View</strong></li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Hierarchical RBAC</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> This model extends the basic RBAC by allowing roles to inherit permissions from other roles. This is useful for organizations where there is a need for role inheritance, such as in enterprise-level systems.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Admin</strong> → Can access all resources</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager</strong> → Can access all resources of their department, but not all resources</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Employee</strong> → Can access only their own department’s resources</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>This helps maintain a clear and scalable access control system.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Attribute-Based RBAC</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> This model adds another layer by including user attributes (such as department or location) along with roles. This allows for more granular control over access permissions.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager of Sales</strong> → Has access to sales data</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager of Marketing</strong> → Has access to marketing data</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>By adding attributes, you can create more flexible policies beyond simple roles.</li></ol><h3>Benefits of RBAC</h3><p>RBAC is widely used because of its many benefits. Here are some of the key advantages:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Security</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> RBAC ensures that users only have access to the resources they need. This <strong>least-privilege</strong> principle reduces the risk of unauthorized access to sensitive data or critical resources.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Simplified Management</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Assigning permissions to roles instead of individual users simplifies the management of access rights. If a new user joins the organization, they can be quickly assigned to the appropriate role without having to manually configure permissions.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Scalability</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> As an organization grows, managing individual permissions becomes complex. RBAC allows for scalable management by grouping users into roles, making it easier to handle hundreds or thousands of users without compromising security.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Regulatory Compliance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Many industries require strict access controls to protect sensitive data (e.g., healthcare or finance). RBAC helps organizations enforce policies that align with regulatory requirements like HIPAA or GDPR.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Audit and Monitoring</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> RBAC makes it easier to track who has access to what resources. This can simplify audits and improve accountability in the organization.</li></ol><h3>Implementing RBAC in Your Application</h3><p>Implementing RBAC in a web application typically involves three key steps:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Defining Roles and Permissions</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Start by identifying the roles in your application and the permissions required for each role. For example:</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Admin</strong>: Can manage users, view and edit data, and configure settings.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Manager</strong>: Can view and edit data but cannot manage users.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>User</strong>: Can view data but cannot edit or delete it.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Assigning Roles to Users</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> After defining roles, you can assign users to these roles either manually or programmatically (during user registration, for example).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example in MongoDB (with Mongoose):</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const userSchema = new mongoose.Schema({</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  username: String,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  password: String,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  role: {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    type: String,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    enum: ['admin', 'manager', 'user'],</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    default: 'user'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const User = mongoose.model('User', userSchema);</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Enforcing Role-Based Permissions</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Once users are assigned roles, you’ll need to check their permissions before allowing access to specific resources or actions. This is typically done in middleware for backend applications.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example of an Express.js middleware for role validation:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">function checkRole(requiredRole) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (req, res, next) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (req.user.role !== requiredRole) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(403).json({ message: 'Access denied' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    next();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  };</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Example route</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">app.get('/admin-dashboard', checkRole('admin'), (req, res) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  res.send('Welcome to the Admin Dashboard');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>In this example, only users with the admin role can access the /admin-dashboard route.</li></ol><h3>Best Practices for Implementing RBAC</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Define Roles Clearly</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Avoid overcomplicating the system by defining too many roles. Stick to a clear, manageable set of roles based on the users’ responsibilities.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Use Role Inheritance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Use hierarchical RBAC for better scalability and to minimize redundancy. Allow roles to inherit permissions from other roles.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Regularly Review Access Control Policies</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> As your organization evolves, so should your RBAC policies. Regularly review roles, permissions, and user assignments to ensure access is always appropriate.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Implement the Principle of Least Privilege</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Always assign users the minimum level of access required to perform their tasks. Avoid giving users more permissions than they need.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Use Auditing and Logging</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Track who accessed what resources and when. This helps detect unauthorized access or potential security breaches.</li></ol><h3>Conclusion</h3><p>Role-Based Access Control (RBAC) is a powerful and scalable way to manage user permissions and protect sensitive resources in your application. By defining roles, assigning appropriate permissions, and enforcing access control policies, you can ensure a secure, manageable, and compliant system.</p><p>Whether you’re building a small app or a large enterprise solution, RBAC is a best practice that can save you time, effort, and resources while keeping your application secure and efficient. If you’re not already using RBAC, consider implementing it in your next project to improve both security and user experience.</p><p><br></p>\",\n            \"excerpt\": \"Ensuring that users have the correct permissions to access resources is crucial for both security and user experience. One of the most common ways to manage access control is Role-Based Access Control (RBAC)\",\n            \"tags\": [\n                \"RBAC\",\n                \"Access Control\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 4,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:49:26.565Z\",\n            \"updatedAt\": \"2025-10-03T22:12:49.798Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 9,\n            \"title\": \"Mastering Asynchronous JavaScript\",\n            \"slug\": \"mastering-asynchronous-javascript\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506307/y34ci4eqk6-1759506307231-1isk46uomkdqguxlprzjmcq-png.png.png\",\n            \"content\": \"<p>JavaScript is known for its asynchronous capabilities, allowing developers to create non-blocking, high-performance web applications. Asynchronous JavaScript is essential when dealing with I/O operations like data fetching, file reading, or timers, all of which could otherwise block the main thread and cause performance issues.</p><p>In this blog post, we’ll explore the basics of asynchronous JavaScript, different ways to handle asynchronous operations, and how to choose the right approach for your use case.</p><h3>What is Asynchronous JavaScript?</h3><p>Asynchronous JavaScript enables the execution of code without blocking the main thread of execution. Unlike synchronous code, which executes line by line and waits for each operation to complete before moving to the next, asynchronous code allows the browser to continue running other tasks (like user interactions) while waiting for long-running operations (such as network requests) to complete.</p><p>In JavaScript, asynchronous behavior is most commonly encountered in situations like:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Fetching data from a server (AJAX or fetch)</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Setting timeouts or intervals (setTimeout, setInterval)</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Event handling (like user clicks or keyboard events)</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Promises and async/await (modern tools for handling asynchronous code)</li></ol><h3>How Asynchronous JavaScript Works</h3><p>To better understand asynchronous behavior, let’s look at a simple example. Consider the following synchronous code:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('First');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('Second');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('Third');</div></div><p>This code will output:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">First</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Second</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Third</div></div><p>Now, let’s introduce an asynchronous operation with setTimeout:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('First');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setTimeout(() =&gt; console.log('Second'), 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">console.log('Third');</div></div><p>In this example:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>'First' is printed immediately.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The setTimeout function sets up an asynchronous operation (logging 'Second' after 1 second).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>'Third' is printed immediately after 'First', even before the timeout completes.</li></ol><p>The output will be:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">First</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Third</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">Second</div></div><p>Here, 'Second' is logged last because setTimeout doesn’t block the main thread, allowing 'Third' to be logged before it.</p><h3>Common Ways to Handle Asynchronous Code</h3><p>JavaScript provides several ways to handle asynchronous code. Let’s go over the most commonly used techniques:</p><h4>1. <strong>Callbacks</strong></h4><p>Callbacks were the original way to handle asynchronous operations in JavaScript. A callback is a function that is passed as an argument to another function and executed when the asynchronous operation is completed.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">function fetchData(callback) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  setTimeout(() =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    callback('Data fetched');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }, 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData((message) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(message);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><p><strong>Pros</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Simple and effective for small-scale operations.</li></ol><p><strong>Cons</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Can lead to <strong>callback hell</strong> or <strong>pyramid of doom</strong> when dealing with multiple nested callbacks, making the code difficult to maintain.</li></ol><h4>2. <strong>Promises</strong></h4><p>Introduced in ES6, Promises provide a cleaner and more manageable way to handle asynchronous code. A Promise represents a value that may be available now, or in the future, or never.</p><p>Here’s how Promises work:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">let fetchData = new Promise((resolve, reject) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  setTimeout(() =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    resolve('Data fetched');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }, 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData.then((message) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(message);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}).catch((error) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.error(error);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>resolve</strong> is used when the asynchronous operation succeeds.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>reject</strong> is used when the asynchronous operation fails.</li></ol><p><strong>Pros</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>More readable and maintainable than callbacks.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Handles errors more effectively with .catch().</li></ol><p><strong>Cons</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Still requires chaining .then() and .catch() for handling results and errors, which can be less intuitive for complex workflows.</li></ol><h4>3. <strong>Async/Await</strong></h4><p>Introduced in ES8, async/await is a syntactic sugar over Promises, making asynchronous code look and behave more like synchronous code.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  let result = await new Promise((resolve) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    setTimeout(() =&gt; resolve('Data fetched'), 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(result);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData();</div></div><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>async</strong> marks a function as asynchronous, and it always returns a Promise.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>await</strong> pauses the execution of the function until the Promise is resolved or rejected.</li></ol><p><strong>Pros</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Cleaner, more readable code.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Makes asynchronous code feel synchronous, improving comprehension.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Handles errors using try/catch blocks, which are more intuitive.</li></ol><p><strong>Cons</strong>:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Can only be used inside async functions.</li></ol><h4>Example: Handling Multiple Async Operations</h4><p>Let’s say we need to fetch data from two different APIs. Using Promises and async/await can simplify this:</p><p><strong>With Promises</strong>:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">function fetchAPI(url) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return new Promise((resolve) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    setTimeout(() =&gt; resolve(`Data from ${url}`), 1000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchAPI('api1.com').then((data1) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return fetchAPI('api2.com');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}).then((data2) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data2);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div></div><p><strong>With Async/Await</strong>:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  let data1 = await fetchAPI('api1.com');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  let data2 = await fetchAPI('api2.com');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  console.log(data2);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">fetchData();</div></div><p>The async/await version is more readable, especially when handling multiple async operations.</p><h3>When to Use Each Approach?</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Callbacks</strong>: Use callbacks for simple, short-lived asynchronous tasks (e.g., basic event listeners or small timer-based functions).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Promises</strong>: Promises are great for handling single asynchronous operations or when you need to chain multiple async operations with .then() and .catch().</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Async/Await</strong>: This is the modern and preferred way for managing asynchronous code. It’s especially useful for handling multiple async operations in sequence and for better error handling with try/catch.</li></ol><h3>Conclusion</h3><p>Asynchronous JavaScript is a powerful tool that enables non-blocking operations, making your web applications faster and more efficient. With the evolution of JavaScript, we now have better ways to handle async tasks, from callbacks to Promises, and now async/await, which offers a clean and readable approach to asynchronous code.</p><p>Understanding how and when to use each of these methods will help you write more efficient, maintainable, and error-free code. Asynchronous programming is essential for handling operations like data fetching, timers, and user events, and with the modern syntax, it’s easier than ever to master.</p><p><br></p>\",\n            \"excerpt\": \"JavaScript is known for its asynchronous capabilities, allowing developers to create non-blocking, high-performance web applications. Asynchronous JavaScript is essential when dealing with I/O operations like data fetching, file reading, or timers\",\n            \"tags\": [\n                \"JavaScript\",\n                \"Asynchronous JavaScript\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 2,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:45:08.094Z\",\n            \"updatedAt\": \"2025-10-03T15:45:25.211Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 8,\n            \"title\": \"What's New in React 19\",\n            \"slug\": \"what's-new-in-react-19\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506127/g36ihglqgyb-1759506127777-images-jpeg.jpeg.jpg\",\n            \"content\": \"<p>React has been evolving rapidly, and every new release brings exciting features and improvements that help developers create better, faster, and more scalable applications. With React 19, the community is buzzing about a host of new features and optimizations. In this blog, we’ll dive into the most notable updates in React 19 and what they mean for your development process.</p><h3>1. <strong>Concurrent Mode Becomes Stable</strong></h3><p>One of the biggest changes in React 19 is the stabilization of Concurrent Mode. This feature was first introduced in experimental versions of React and allows React to work on multiple tasks at the same time, rather than blocking the main thread while rendering components. With Concurrent Mode, React can prioritize updates and ensure that the user experience remains smooth and responsive, even when dealing with large datasets or complex UI changes.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Responsiveness</strong>: React can pause rendering to handle high-priority updates (like animations or user inputs) before continuing with less critical tasks.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>: By breaking rendering tasks into smaller chunks, the browser thread isn’t blocked, resulting in faster load times and smoother interactions.</li></ol><p>With React 19, Concurrent Mode is no longer experimental and can be used by default, providing better performance and responsiveness for production applications.</p><h3>2. <strong>Automatic Batching of Updates</strong></h3><p>React 19 introduces <strong>automatic batching</strong>, a feature that allows React to group multiple state updates into a single render cycle, improving performance and reducing unnecessary re-renders.</p><p>Previously, React would re-render a component every time a state update occurred. With automatic batching, React now collects all state updates in an event or lifecycle, and only re-renders the component once after all updates are processed. This significantly reduces the number of renders and improves the overall performance of React applications.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Performance Boost</strong>: Reduces the number of renders, especially in complex applications.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Cleaner Code</strong>: No need to manually batch state updates.</li></ol><p>Example:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Before automatic batching</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState1(newState1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState2(newState2);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// With automatic batching in React 19, only one re-render will occur after both updates.</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState1(newState1);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">setState2(newState2);</div></div><h3>3. <strong>React Server Components Enhancements</strong></h3><p>React Server Components (RSC) were first introduced to allow developers to render parts of their app on the server, reducing the JavaScript bundle size sent to the client. In React 19, RSCs have seen major enhancements to improve both functionality and performance.</p><p>One of the key improvements is <strong>streaming</strong>: React can now stream components as they are being rendered on the server, sending them to the client in smaller chunks rather than waiting for the entire component tree to render. This allows for faster loading times and a better user experience.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smaller Client Bundles</strong>: Server-rendered components are sent as static HTML, meaning less JavaScript is required on the client-side.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Loading</strong>: React can stream data from the server to the client, improving load times and reducing time-to-interactive.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better SEO</strong>: Since the content is server-rendered, search engines can easily crawl the content, improving SEO performance.</li></ol><h3>4. <strong>Improved Error Boundaries</strong></h3><p>Error boundaries have been a staple of React for handling JavaScript errors in the component tree. However, React 19 introduces an improved version of error boundaries, making it easier to catch and handle errors at the component level.</p><p>The new error boundary model allows for better error handling and supports displaying fallback UI while keeping the app running smoothly even in the case of an error.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better User Experience</strong>: The improved error boundaries provide a smoother user experience by displaying fallback UI when an error occurs.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>More Granular Control</strong>: You can now have more granular control over where errors are caught in the component tree.</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Example of a new error boundary in React 19</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">class ErrorBoundary extends React.Component {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  componentDidCatch(error, info) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    // Log error to an error tracking service</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  render() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (this.state.hasError) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    return this.props.children;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>5. <strong>New JSX Transform</strong></h3><p>React 19 comes with an updated JSX transform. This update allows React to work more efficiently with JSX syntax, eliminating the need for React.createElement calls. The JSX transform is now more optimized and supports improved tree shaking, which helps in reducing the final bundle size.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Development</strong>: With the new JSX transform, you no longer need to import React in every component that uses JSX.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smaller Bundles</strong>: Tree shaking removes unused code, reducing the size of your final JavaScript bundle.</li></ol><h3>6. <strong>Improved Suspense for Data Fetching</strong></h3><p>While Suspense was initially designed for code-splitting, React 19 improves the Suspense API for data fetching. The new updates make it easier to handle loading states and manage asynchronous rendering.</p><p>Now, you can suspend data-fetching components more easily and gracefully handle loading indicators. This makes React a more efficient tool for building apps with dynamic data, such as real-time apps or apps with complex data dependencies.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smoother User Experience</strong>: Users will experience fewer loading flickers as data is fetched and displayed asynchronously.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Support for Concurrent Rendering</strong>: Suspense works well with Concurrent Mode, ensuring that data fetching doesn’t block rendering.</li></ol><h3>7. <strong>Concurrent Rendering for Layout Effects</strong></h3><p>React 19 also introduces <strong>concurrent rendering for layout effects</strong>. Previously, layout effects were run synchronously, blocking the UI thread and potentially causing delays. With the new update, layout effects can now be executed concurrently, which means they don’t block the rendering process and the UI can remain responsive.</p><h4>Benefits:</h4><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Smoother Animations</strong>: Layout effects will no longer block the main thread, leading to smoother animations and transitions.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved UI Responsiveness</strong>: React can handle layout updates concurrently, reducing delays during complex UI updates.</li></ol><h3>Conclusion</h3><p>React 19 brings a host of exciting features and improvements that will make your development process faster, more efficient, and more powerful. From the stable release of Concurrent Mode to enhanced Server Components, automatic batching, and better error handling, React 19 is packed with features that make it a solid choice for building modern web applications.</p><p>By adopting these new features, you’ll not only improve your app’s performance but also deliver a better user experience. If you haven’t already, consider upgrading to React 19 and start exploring the improvements today.</p><p><br></p>\",\n            \"excerpt\": \"React has been evolving rapidly, and every new release brings exciting features and improvements that help developers create better, faster, and more scalable applications. With React 19, the community is buzzing about a host of new features and optimizations.\",\n            \"tags\": [\n                \"React\",\n                \"Server Component\",\n                \"Concurrent Redering\"\n            ],\n            \"isFeatured\": false,\n            \"isPublished\": true,\n            \"views\": 0,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:42:08.288Z\",\n            \"updatedAt\": \"2025-10-03T15:42:08.288Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 7,\n            \"title\": \"A Beginner’s Guide to Next.js API Routes\",\n            \"slug\": \"a-beginner's-guide-to-next.js-api-routes\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759505789/lv2aof2i3vm-1759505789849-z13cpbqstj98ina-complete-guide-to-next-js-a-react-js-framework-avif.avif.avif\",\n            \"content\": \"<p>Next.js is a popular React framework that not only simplifies front-end development but also provides an easy way to create backend API routes within the same project. One of the key features in Next.js is the ability to define API routes. These allow you to build server-side functionality without needing a separate backend server.</p><p>In this blog post, we’ll explore what Next.js API routes are, how they work, and how you can use them to build a full-stack application with ease.</p><h3>What Are Next.js API Routes?</h3><p>API routes in Next.js are a simple and powerful way to build backend endpoints within your application. They allow you to handle HTTP requests (like GET, POST, PUT, DELETE) directly in your Next.js project, using the same project structure you use for your front-end code. This eliminates the need for a separate backend server, which simplifies development.</p><p>Each API route is a file inside the pages/api directory, where the file name corresponds to the route.</p><p>For example, if you create a file pages/api/hello.js, it would correspond to the API endpoint /api/hello.</p><h3>How Do API Routes Work in Next.js?</h3><p>API routes in Next.js work by exporting a handler function inside the file. This handler function accepts two arguments: req (request) and res (response). You can then use these objects to handle the incoming HTTP request, process any logic (like database queries), and send back a response.</p><p>Here’s an example of a simple API route:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/hello.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  res.status(200).json({ message: \\\"Hello, World!\\\" });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>In this example:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>req represents the HTTP request object, which contains information about the incoming request (like method, body, headers, etc.).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>res is the response object, which allows you to send a response back to the client.</li></ol><h3>Types of API Routes</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>GET Request</strong>: You can handle GET requests to fetch data. For example, fetching data from a database or returning static data.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>POST Request</strong>: Handle POST requests to receive data from the client, like form submissions or data created by the user.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>PUT/PATCH Request</strong>: Handle updates to data, typically used in CRUD operations.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>DELETE Request</strong>: Handle deleting data from the server.</li></ol><h3>Example 1: Handling a GET Request</h3><p>Let’s create an API route that responds with a list of items when a GET request is made.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/items.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (req.method === 'GET') {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const items = ['Item 1', 'Item 2', 'Item 3'];</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(200).json(items);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(405).json({ message: 'Method Not Allowed' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>When you visit /api/items, you’ll get a response like this:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">[\\\"Item 1\\\", \\\"Item 2\\\", \\\"Item 3\\\"]</div></div><h3>Example 2: Handling a POST Request</h3><p>Now, let’s handle a POST request where we simulate adding an item to a list.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/addItem.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">let items = ['Item 1', 'Item 2', 'Item 3'];</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (req.method === 'POST') {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const { newItem } = req.body;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (!newItem) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(400).json({ message: 'Item name is required' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    items.push(newItem);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(201).json({ message: 'Item added', items });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(405).json({ message: 'Method Not Allowed' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>To test this, you can make a POST request to /api/addItem with a JSON body like this:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">{</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  \\\"newItem\\\": \\\"Item 4\\\"</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>Response:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">{</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  \\\"message\\\": \\\"Item added\\\",</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  \\\"items\\\": [\\\"Item 1\\\", \\\"Item 2\\\", \\\"Item 3\\\", \\\"Item 4\\\"]</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>Handling Dynamic API Routes</h3><p>Next.js also supports dynamic API routes. You can create API routes with dynamic parameters by using the [param] syntax.</p><p>Example: A dynamic API route that fetches an item by its ID.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// pages/api/item/[id].js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function handler(req, res) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    query: { id },</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    method,</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } = req;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (method === 'GET') {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const items = ['Item 1', 'Item 2', 'Item 3'];</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    const item = items.find((i) =&gt; i === `Item ${id}`);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    if (item) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(200).json({ item });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      return res.status(404).json({ message: 'Item not found' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  } else {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    res.status(405).json({ message: 'Method Not Allowed' });</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>Now you can access the route /api/item/1, /api/item/2, etc., and get the corresponding item.</p><h3>Benefits of Next.js API Routes</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Simplified Full-Stack Development</strong>: You can build both the front-end and back-end within the same Next.js application, reducing complexity and improving the development workflow.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Serverless Ready</strong>: Next.js API routes can be easily deployed on serverless platforms like Vercel. Each API route is treated as a serverless function, making it simple to scale without worrying about server management.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Built-In Routing</strong>: Next.js automatically maps the file structure in the pages/api directory to API routes, so you don’t need to worry about manually setting up routes.</li></ol><h3>Conclusion</h3><p>Next.js API routes offer a simple and effective way to build server-side functionality within your Next.js project. Whether you're building a REST API, handling form submissions, or performing CRUD operations, API routes let you add backend logic seamlessly.</p><p>With Next.js, you can create a full-stack application with minimal setup. The best part? You don't need a separate backend server, making it easier to maintain and deploy your application. Try out Next.js API routes in your next project and see how they can improve your development workflow.</p>\",\n            \"excerpt\": \"Next.js is a popular React framework that not only simplifies front-end development but also provides an easy way to create backend API routes within the same project. One of the key features in Next.js is the ability to define API routes.\",\n            \"tags\": [\n                \"Nextjs\",\n                \"API Route\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 0,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:36:30.459Z\",\n            \"updatedAt\": \"2025-10-03T15:36:30.459Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 6,\n            \"title\": \"Getting Started with Next.js App Router\",\n            \"slug\": \"getting-started-with-next.js-app-router\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759505654/k4yf5bgegrg-1759505654179-0dkhu49vrbisswknbhar1920x1357-webp.webp.webp\",\n            \"content\": \"<p>Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.</p><p>In this post, we’ll give you a brief overview of the App Router, its benefits, and how to get started using it.</p><h3>What is the App Router in Next.js?</h3><p>The App Router is a new routing system introduced in Next.js 13, built to work seamlessly with React’s Server Components. It provides a file-based routing structure that makes it easier to manage both server-side and client-side rendering. This replaces the traditional pages directory with the more powerful app directory, offering a more modular, nested, and dynamic routing approach.</p><h3>Key Features of the App Router</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File-based Routing</strong>: Just like with the old pages directory, the App Router uses a file-based system, but with more flexibility and options for server-side rendering (SSR) and static site generation (SSG).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Layouts &amp; Nested Routing</strong>: You can create layouts that persist across routes, allowing for more complex UI structures with nested routes. This is useful for building things like dashboards, where certain parts of the UI (like sidebars or headers) stay the same, and only the main content changes.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server Components</strong>: With the App Router, Next.js fully integrates React Server Components, allowing you to render parts of the UI on the server, reducing client-side JavaScript and improving performance.</li></ol><h3>How to Use the App Router</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Create the App Directory</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> If you're starting a new Next.js project with version 13+, you'll notice that the app directory replaces pages. Inside app, each directory corresponds to a route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example structure:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">/app</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  /about</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  /dashboard</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    layout.js</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Defining Routes</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Just like with the pages directory, create a page.js or page.tsx file for each route you want to define. For example, creating an about/page.js will automatically create the /about route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Using Layouts</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Layouts are defined in files named layout.js or layout.tsx inside route directories. These are used to wrap child routes.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/dashboard/layout.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function DashboardLayout({ children }) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;header&gt;Dashboard Header&lt;/header&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;aside&gt;Sidebar&lt;/aside&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;main&gt;{children}&lt;/main&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;/div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  );</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Async Rendering with Server Components</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> You can define a component as a server component by exporting it from a .js file. This allows React to fetch data on the server and send only the minimal required HTML to the client.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/dashboard/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default async function DashboardPage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const data = await fetchData();  // Fetch data server-side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Dynamic Routing</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> You can create dynamic routes using the [param] syntax, similar to the old pages routing system. For instance, creating a [id]/page.js will create a dynamic route based on the id parameter.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/post/[id]/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function PostPage({ params }) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const { id } = params;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;Post ID: {id}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>Benefits of the App Router</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>: By using server-side rendering and React Server Components, Next.js can optimize what gets sent to the client, reducing JavaScript bundle sizes and improving page load times.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Flexible Layouts</strong>: Nested routing and layouts allow for more complex UI structures without repeating code.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Developer Experience</strong>: With a more modular and flexible routing system, developers can manage routes and layouts more efficiently, leading to faster development times.</li></ol><h3>Conclusion</h3><p>Next.js’ App Router brings a new level of flexibility and power to routing in React applications. Whether you're building static pages, server-rendered routes, or complex dynamic UIs, the App Router allows you to handle it all with ease. It simplifies how we organize and manage components, making it a great tool for building scalable, high-performance web applications.</p><p>If you’re new to Next.js, switching to the App Router can greatly enhance your development experience and application performance. Try it out in your next project!</p><p><br></p>\",\n            \"excerpt\": \"Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.\",\n            \"tags\": [\n                \"Nextjs\",\n                \"APP Router\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 0,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-03T15:34:14.962Z\",\n            \"updatedAt\": \"2025-10-03T15:34:14.962Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Understanding React Suspense\",\n            \"slug\": \"understanding-react-suspense\",\n            \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759422166/lhr6c5ysfb9-1759422165862-ygicpoghruyymn211yjt-webp.webp.webp\",\n            \"content\": \"<p>React Suspense is one of the most exciting and powerful features introduced in React 16.6. It helps developers build faster, more dynamic web applications by handling asynchronous data fetching in a more declarative manner. In this post, we will dive deep into what React Suspense is, how it works, and how you can use it to improve the user experience in your React applications.</p><h3>What is React Suspense?</h3><p>React Suspense is a feature that allows developers to \\\"suspend\\\" the rendering of a component tree while waiting for some asynchronous operation (like data fetching, code-splitting, or image loading) to complete. It helps to manage loading states and delays in a cleaner, more user-friendly way.</p><p>Instead of showing loading indicators or placeholders manually for each piece of data, Suspense allows you to specify a loading boundary for components that depend on asynchronous data, and React takes care of the rest.</p><h3>Why Suspense?</h3><p>Traditionally, asynchronous operations in React have been managed using state (e.g., isLoading or hasError), which requires explicit handling of loading states. React Suspense abstracts this process, allowing you to declaratively handle such states, making your code cleaner, more readable, and maintainable.</p><h3>How Does React Suspense Work?</h3><p>React Suspense works by wrapping components that depend on asynchronous data in a Suspense component. The Suspense component allows you to define a fallback UI (usually a loading spinner or placeholder) that will be displayed until the wrapped component's data is ready.</p><h4>Basic Example:</h4><p>Let’s look at a simple example to see how Suspense works in practice.</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">import React, { Suspense } from \\\"react\\\";</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// Simulate an asynchronous data fetching function</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const fetchData = new Promise((resolve) =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  setTimeout(() =&gt; resolve(\\\"Data loaded!\\\"), 2000);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">});</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// A component that depends on fetching data</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const MyComponent = () =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const [data, setData] = React.useState(null);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  React.useEffect(() =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    fetchData.then((result) =&gt; setData(result));</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }, []);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  if (!data) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    throw fetchData; // Suspense will handle this promise</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  }</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">};</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const App = () =&gt; {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">        &lt;MyComponent /&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;/Suspense&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;/div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  );</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">};</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default App;</div></div><p>In this example:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>MyComponent fetches data asynchronously.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Suspense wraps MyComponent and provides a fallback UI (&lt;div&gt;Loading...&lt;/div&gt;).</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Until the data is fetched, React will suspend the rendering of MyComponent and show the fallback UI.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Once the data is ready, React re-renders the component with the fetched data.</li></ol><h3>Key Concepts of React Suspense</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Suspense Boundary</strong>: The &lt;Suspense&gt; component acts as a boundary where asynchronous operations can be \\\"suspended\\\". You can have multiple Suspense boundaries in your app, each with its own fallback UI.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Fallback UI</strong>: This is the UI that appears while waiting for the data to load. You can display loading spinners, skeleton screens, or any custom component to enhance the user experience during loading states.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Lazy Loading</strong>: React Suspense works hand-in-hand with React.lazy(), which allows you to split your code into smaller chunks and load them only when they are needed. This reduces the initial bundle size, improving the performance of your app.</li></ol><p><br></p>\",\n            \"excerpt\": \"React Suspense is a feature that allows developers to \\\"suspend\\\" the rendering of a component tree while waiting for some asynchronous operation (like data fetching, code-splitting, or image loading) to complete. \",\n            \"tags\": [\n                \"React\",\n                \"React Suspense\"\n            ],\n            \"isFeatured\": true,\n            \"isPublished\": true,\n            \"views\": 45,\n            \"authorId\": 2,\n            \"createdAt\": \"2025-10-02T01:00:07.172Z\",\n            \"updatedAt\": \"2025-10-02T16:49:17.680Z\",\n            \"author\": {\n                \"name\": \"Super admin\"\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get Single Blog by Id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog/id/6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog",
										"id",
										"6"
									]
								}
							},
							"response": [
								{
									"name": "Get Single Blog by Id",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog/id/6",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog",
												"id",
												"6"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "9046"
										},
										{
											"key": "ETag",
											"value": "W/\"2356-rrvMP5Krqljv+I7kSyEAcwR21Sw\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:34:32 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Blog retrieved successfully\",\n    \"data\": {\n        \"id\": 6,\n        \"title\": \"Getting Started with Next.js App Router\",\n        \"slug\": \"getting-started-with-next.js-app-router\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759505654/k4yf5bgegrg-1759505654179-0dkhu49vrbisswknbhar1920x1357-webp.webp.webp\",\n        \"content\": \"<p>Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.</p><p>In this post, we’ll give you a brief overview of the App Router, its benefits, and how to get started using it.</p><h3>What is the App Router in Next.js?</h3><p>The App Router is a new routing system introduced in Next.js 13, built to work seamlessly with React’s Server Components. It provides a file-based routing structure that makes it easier to manage both server-side and client-side rendering. This replaces the traditional pages directory with the more powerful app directory, offering a more modular, nested, and dynamic routing approach.</p><h3>Key Features of the App Router</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File-based Routing</strong>: Just like with the old pages directory, the App Router uses a file-based system, but with more flexibility and options for server-side rendering (SSR) and static site generation (SSG).</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Layouts &amp; Nested Routing</strong>: You can create layouts that persist across routes, allowing for more complex UI structures with nested routes. This is useful for building things like dashboards, where certain parts of the UI (like sidebars or headers) stay the same, and only the main content changes.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server Components</strong>: With the App Router, Next.js fully integrates React Server Components, allowing you to render parts of the UI on the server, reducing client-side JavaScript and improving performance.</li></ol><h3>How to Use the App Router</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Create the App Directory</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> If you're starting a new Next.js project with version 13+, you'll notice that the app directory replaces pages. Inside app, each directory corresponds to a route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example structure:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">/app</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  /about</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  /dashboard</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    layout.js</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Defining Routes</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Just like with the pages directory, create a page.js or page.tsx file for each route you want to define. For example, creating an about/page.js will automatically create the /about route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Using Layouts</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Layouts are defined in files named layout.js or layout.tsx inside route directories. These are used to wrap child routes.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/dashboard/layout.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function DashboardLayout({ children }) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return (</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;header&gt;Dashboard Header&lt;/header&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;aside&gt;Sidebar&lt;/aside&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">      &lt;main&gt;{children}&lt;/main&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">    &lt;/div&gt;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  );</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Async Rendering with Server Components</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> You can define a component as a server component by exporting it from a .js file. This allows React to fetch data on the server and send only the minimal required HTML to the client.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/dashboard/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default async function DashboardPage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const data = await fetchData();  // Fetch data server-side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Dynamic Routing</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> You can create dynamic routes using the [param] syntax, similar to the old pages routing system. For instance, creating a [id]/page.js will create a dynamic route based on the id parameter.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// /app/post/[id]/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function PostPage({ params }) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  const { id } = params;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">  return &lt;div&gt;Post ID: {id}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><h3>Benefits of the App Router</h3><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>: By using server-side rendering and React Server Components, Next.js can optimize what gets sent to the client, reducing JavaScript bundle sizes and improving page load times.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Flexible Layouts</strong>: Nested routing and layouts allow for more complex UI structures without repeating code.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Developer Experience</strong>: With a more modular and flexible routing system, developers can manage routes and layouts more efficiently, leading to faster development times.</li></ol><h3>Conclusion</h3><p>Next.js’ App Router brings a new level of flexibility and power to routing in React applications. Whether you're building static pages, server-rendered routes, or complex dynamic UIs, the App Router allows you to handle it all with ease. It simplifies how we organize and manage components, making it a great tool for building scalable, high-performance web applications.</p><p>If you’re new to Next.js, switching to the App Router can greatly enhance your development experience and application performance. Try it out in your next project!</p><p><br></p>\",\n        \"excerpt\": \"Next.js is a powerful React framework that provides a streamlined way to build full-stack web applications. With the introduction of the App Router in Next.js 13, managing routes has become even more intuitive and flexible.\",\n        \"tags\": [\n            \"Nextjs\",\n            \"APP Router\"\n        ],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"views\": 0,\n        \"authorId\": 2,\n        \"createdAt\": \"2025-10-03T15:34:14.962Z\",\n        \"updatedAt\": \"2025-10-03T15:34:14.962Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update Blog",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"value": "{\n  \"isFeatured\": true\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog/11",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog",
										"11"
									]
								}
							},
							"response": [
								{
									"name": "Update Blog",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "data",
													"value": "{\n  \"isFeatured\": true\n}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog/11",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog",
												"11"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "15341"
										},
										{
											"key": "ETag",
											"value": "W/\"3bed-E2SWx3XX0p0TqGWZaiJXLddw6xY\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:31:53 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Blog updated successfully\",\n    \"data\": {\n        \"id\": 11,\n        \"title\": \"Simplifying Server Actions in Modern Web Development\",\n        \"slug\": \"simplifying-server-actions-in-modern-web-development\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759506765/64aqiaqq3l7-1759506765096-15cpbnzqnvaz-jzmktfguja-png.png.png\",\n        \"content\": \"<p>In modern web development, handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end, enabling developers to write server-side code directly within their components or routes.</p><p>In this blog post, we’ll dive into what server actions are, how they work, their benefits, and how you can integrate them into your web applications.</p><h3>What Are Server Actions?</h3><p><strong>Server actions</strong> are a way of executing server-side code directly from the client side, often integrated into frameworks like Next.js. Instead of creating separate API routes for every server-side operation, server actions allow developers to define server-side logic within their React components or other parts of the application.</p><p>This approach brings the power of server-side functionality (like database queries, authentication checks, and data manipulation) to client-side components without needing to manage separate API endpoints. Server actions can simplify how developers handle common tasks like data fetching, authentication, and form submissions.</p><h3>How Do Server Actions Work?</h3><p>Typically, server actions allow you to write server-side logic within specific React components or routes, and the server takes care of executing this code when triggered by the client. When a request is made, the server action handles the logic and returns a response to the client.</p><p>For example, in <strong>Next.js</strong>, server actions work seamlessly with API routes and React components. These actions are executed server-side but can be called directly from your front-end code. This reduces the need to create separate APIs and allows for a more integrated approach to server-client communication.</p><p>Here’s a simplified example in Next.js:</p><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// In your React component</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function fetchData() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// This will run on the server side</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromDatabase();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function Page() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchData();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>In this example:</p><ol><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The fetchData function is executed on the server, fetching data from a database or API.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The async function allows for the handling of asynchronous code like database queries or API calls.</li><li data-list=\\\"bullet\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>The response is sent back to the component, and the user can interact with it in the UI.</li></ol><h3>Benefits of Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Reduced Complexity</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> One of the biggest advantages of server actions is that they allow you to move server-side logic directly into your React components. This eliminates the need to create separate API endpoints or manage a server-side framework for each task, making your codebase simpler and more maintainable.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Faster Development</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Since server actions remove the need for explicit API routes, you can quickly implement server-side functionality and avoid the extra boilerplate of creating RESTful or GraphQL endpoints. This can speed up your development process significantly.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Improved Data Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions allow for direct interaction with server-side resources, like databases or external APIs, without the overhead of multiple HTTP requests. This can result in more efficient data fetching, especially for tasks that involve complex server-side processing or logic.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Better Performance</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> By executing server-side logic directly, you reduce the number of HTTP requests between the client and server. This can lead to improved performance, as the server can respond directly with the required data, avoiding unnecessary round trips.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Server-Side Rendering (SSR) Integration</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> In frameworks like Next.js, server actions fit naturally with Server-Side Rendering (SSR) workflows. Server actions can be invoked during SSR, allowing for faster page loads and better SEO.</li></ol><h3>Use Cases for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Data Fetching</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are perfect for fetching data that requires complex processing or access to private resources like databases or third-party services.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function getUserData(userId) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const userData = await fetchUserDataFromDB(userId);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return userData;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Authentication and Authorization</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can simplify authentication logic. You can handle authentication and authorization checks directly in the component, which would traditionally require a separate API route.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function loginUser(credentials) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const user = await authenticate(credentials);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">if (!user) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">throw new Error('Invalid credentials');</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return user;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Form Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions make form submission and processing much easier by eliminating the need for an additional API endpoint. You can directly handle form submissions on the server.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span>Example:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">async function submitForm(data) {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const response = await submitFormDataToDatabase(data);</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return response;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>File Uploads</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions can also handle file uploads, as they allow you to directly interact with server-side logic to manage files, store them in cloud storage, or process them as needed.</li></ol><h3>Implementing Server Actions in Next.js</h3><p>In <strong>Next.js 13+</strong>, server actions have been tightly integrated with the app router and are built to be easy to use. Here’s an example of how to implement a server action in Next.js:</p><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Define a Server Action</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/actions.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">'use server'</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export async function fetchDataFromServer() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = await fetchDataFromAPI();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return data;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Call Server Action in the Component</strong>:</li></ol><div class=\\\"ql-code-block-container\\\" spellcheck=\\\"false\\\"><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">// app/page.js</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">import { fetchDataFromServer } from './actions';</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\"><br></div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">export default function HomePage() {</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">const data = fetchDataFromServer();</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">return &lt;div&gt;{data}&lt;/div&gt;;</div><div class=\\\"ql-code-block\\\" data-language=\\\"plain\\\">}</div></div><p>This example showcases how to define a server action (fetchDataFromServer) in a separate file and then call it from your component. It’s a simple and clean way to keep your code organized while executing server-side logic.</p><h3>Best Practices for Server Actions</h3><ol><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Separation of Concerns</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Although server actions simplify the workflow, it’s still important to keep business logic separate from UI logic. Maintain clarity by placing complex server-side operations in dedicated functions or service files.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Error Handling</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Always implement proper error handling in server actions. Since server actions are asynchronous, ensure that errors are caught and handled gracefully to avoid crashes or unexpected behavior.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Avoid Overuse</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> Server actions are great for tasks that require server-side logic, but they might not always be the best solution for tasks like static data fetching. Use them judiciously to avoid cluttering your components with too much server-side code.</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span><strong>Security</strong>:</li><li data-list=\\\"ordered\\\"><span class=\\\"ql-ui\\\" contenteditable=\\\"false\\\"></span> When implementing server actions, always keep security in mind. Ensure that sensitive data is properly protected, and avoid exposing private resources unnecessarily.</li></ol><h3>Conclusion</h3><p>Server actions are a game-changer for modern web development, simplifying how we handle server-side logic and improving the overall performance and maintainability of applications. By enabling direct interaction with the server from within your components, server actions eliminate the need for complex API routes and reduce boilerplate code.</p><p>If you're working with frameworks like Next.js, incorporating server actions into your workflow can significantly enhance your development experience and allow for more efficient, scalable applications. Whether you're handling data fetching, form submissions, or authentication, server actions provide a clean, integrated solution for many common tasks.</p><p>Embrace server actions in your next project and simplify how you handle server-side logic.</p><p><br></p><p><br></p>\",\n        \"excerpt\": \"Handling complex server-side logic efficiently is crucial for building scalable and performant applications. Server actions have emerged as a powerful tool to simplify the interaction between the front end and the back end\",\n        \"tags\": [],\n        \"isFeatured\": true,\n        \"isPublished\": true,\n        \"views\": 56,\n        \"authorId\": 2,\n        \"createdAt\": \"2025-10-03T15:52:45.945Z\",\n        \"updatedAt\": \"2025-10-05T06:31:53.194Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Delete blog",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/blog/13",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"blog",
										"13"
									]
								}
							},
							"response": [
								{
									"name": "Delete blog",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoic3VwZXJAbmV4dC5jb20iLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3NTk2NDEzODcsImV4cCI6MTc1OTkwMDU4N30.HT732mL4RagVDESp1VZmZnQv5G2dBkKQ7yIZXcqECNE",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/api/v1/blog/13",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"api",
												"v1",
												"blog",
												"13"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "http://localhost:3000"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "550"
										},
										{
											"key": "ETag",
											"value": "W/\"226-zPVz2PYeJrRYdj2fjmlQh5XrjA8\""
										},
										{
											"key": "Date",
											"value": "Sun, 05 Oct 2025 06:32:37 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 200,\n    \"success\": true,\n    \"message\": \"Blog deleted successfully\",\n    \"data\": {\n        \"id\": 13,\n        \"title\": \"Eaque vero reprehendtr4t\",\n        \"slug\": \"eaque-vero-reprehendtr4t\",\n        \"thumbnail\": \"https://res.cloudinary.com/ddighugza/image/upload/v1759538050/klgbd7llexp-1759538049966-0dkhu49vrbisswknbhar1920x1357-webp.webp.webp\",\n        \"content\": \"<p>Et et repudiandae li.</p>\",\n        \"excerpt\": \"Dolore deleniti debi\",\n        \"tags\": [\n            \"Omnis totam ut excep\"\n        ],\n        \"isFeatured\": false,\n        \"isPublished\": true,\n        \"views\": 10,\n        \"authorId\": 2,\n        \"createdAt\": \"2025-10-04T00:34:10.670Z\",\n        \"updatedAt\": \"2025-10-05T04:21:22.847Z\"\n    }\n}"
								}
							]
						}
					]
				}
			]
		}
	]
}